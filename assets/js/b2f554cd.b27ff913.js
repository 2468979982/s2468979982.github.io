"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6880],{8256:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/volta-\u8bbe\u7f6e\u9ed8\u8ba4node\u7248\u672c","metadata":{"permalink":"/blog/volta-\u8bbe\u7f6e\u9ed8\u8ba4node\u7248\u672c","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/volta-\u8bbe\u7f6e\u9ed8\u8ba4node\u7248\u672c.md","source":"@site/blog/volta-\u8bbe\u7f6e\u9ed8\u8ba4node\u7248\u672c.md","title":"volta \u8bbe\u7f6e\u9ed8\u8ba4node\u7248\u672c","description":"volta \u662f\u4e00\u4e2a\u7248\u672c\u7ba1\u7406\u5de5\u5177\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u4f60\u7ba1\u7406\u591a\u4e2a\u9879\u76ee\u4e2d\u7684\u4e0d\u540cNode.js\u7248\u672c\u3002\u8981\u8bbe\u7f6e\u9ed8\u8ba4\u7684Node.js\u7248\u672c\uff0c\u4f60\u9700\u8981\u5148\u786e\u4fdd\u4f60\u5df2\u7ecf\u5b89\u88c5\u4e86volta\u3002","date":"2024-02-11T18:53:25.000Z","formattedDate":"February 11, 2024","tags":[{"label":"volta","permalink":"/blog/tags/volta"},{"label":"node","permalink":"/blog/tags/node"}],"readingTime":1.145,"hasTruncateMarker":false,"authors":[{"name":"lzs","title":"Maintainer of Docusaurus","url":"https://github.com/2468979982","imageURL":"https://github.com/2468979982.png","key":"default"}],"frontMatter":{"title":"volta \u8bbe\u7f6e\u9ed8\u8ba4node\u7248\u672c","date":"2024-02-11T18:53:25.000Z","tags":["volta","node"],"draft":false,"authors":["default"]},"unlisted":false,"nextItem":{"title":"Spring Security OAuth2 \u5185\u7701\u534f\u8bae\u4e0e JWT \u7ed3\u5408\u4f7f\u7528\u6307\u5357","permalink":"/blog/oauth2-introspection-with-jwt"}},"content":"volta \u662f\u4e00\u4e2a\u7248\u672c\u7ba1\u7406\u5de5\u5177\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u4f60\u7ba1\u7406\u591a\u4e2a\u9879\u76ee\u4e2d\u7684\u4e0d\u540cNode.js\u7248\u672c\u3002\u8981\u8bbe\u7f6e\u9ed8\u8ba4\u7684Node.js\u7248\u672c\uff0c\u4f60\u9700\u8981\u5148\u786e\u4fdd\u4f60\u5df2\u7ecf\u5b89\u88c5\u4e86volta\u3002\\r\\n\\r\\n\u5728\u547d\u4ee4\u884c\u4e2d\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u6765\u8bbe\u7f6e\u9ed8\u8ba4\u7684Node.js\u7248\u672c\uff1a\\r\\n\\r\\nvolta install node@\u7248\u672c\u53f7\\r\\n\\r\\n\u5c06\u7248\u672c\u53f7\u66ff\u6362\u4e3a\u4f60\u60f3\u8981\u8bbe\u7f6e\u4e3a\u9ed8\u8ba4\u7684Node.js\u7248\u672c\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u60f3\u8981\u8bbe\u7f6eNode.js 14.17.0\u4e3a\u9ed8\u8ba4\u7248\u672c\uff0c\u4f60\u53ef\u4ee5\u8fd0\u884c\uff1a\\r\\n\\r\\nvolta install node@14.17.0\\r\\n\\r\\n\u8fd9\u5c06\u4f1a\u8bbe\u7f6e\u5168\u5c40\u9ed8\u8ba4\u7684Node.js\u7248\u672c\u3002\u5f53\u4f60\u5728\u65b0\u7684\u7ec8\u7aef\u4f1a\u8bdd\u4e2d\u65f6\uff0c\u8fd0\u884cnode --version\u5c06\u4f1a\u663e\u793a\u8fd9\u4e2a\u7248\u672c\u3002\\r\\n\\r\\n\u5982\u679c\u4f60\u53ea\u60f3\u4e3a\u5f53\u524d\u9879\u76ee\u8bbe\u7f6eNode.js\u7248\u672c\uff0c\u53ef\u4ee5\u5728\u9879\u76ee\u76ee\u5f55\u4e0b\u8fd0\u884c\uff1a\\r\\n\\r\\nvolta pin node\\r\\n\\r\\n\u8fd9\u5c06\u4f1a\u521b\u5efa\u4e00\u4e2apackage.json\u6587\u4ef6\uff0c\u91cc\u9762\u5305\u542b\u4e86Node.js\u7248\u672c\u7684pin\u3002\\r\\n\\r\\n\u6ce8\u610f\uff1a\u5982\u679c\u4f60\u4ece\u672a\u4f7f\u7528\u8fc7volta\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u5148\u8fd0\u884cvolta install\u6765\u5b89\u88c5Node.js\u3002"},{"id":"/oauth2-introspection-with-jwt","metadata":{"permalink":"/blog/oauth2-introspection-with-jwt","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/oauth2-introspection-with-jwt.mdx","source":"@site/blog/oauth2-introspection-with-jwt.mdx","title":"Spring Security OAuth2 \u5185\u7701\u534f\u8bae\u4e0e JWT \u7ed3\u5408\u4f7f\u7528\u6307\u5357","description":"Spring Security OAuth2 \u5185\u7701\u534f\u8bae\u4e0e JWT \u7ed3\u5408\u4f7f\u7528\u6307\u5357","date":"2022-12-04T20:14:01.000Z","formattedDate":"December 4, 2022","tags":[{"label":"SpringSecurity","permalink":"/blog/tags/spring-security"},{"label":"OAuth2","permalink":"/blog/tags/o-auth-2"}],"readingTime":8.82,"hasTruncateMarker":false,"authors":[{"name":"lzs","title":"Maintainer of Docusaurus","url":"https://github.com/2468979982","imageURL":"https://github.com/2468979982.png","key":"default"}],"frontMatter":{"title":"Spring Security OAuth2 \u5185\u7701\u534f\u8bae\u4e0e JWT \u7ed3\u5408\u4f7f\u7528\u6307\u5357","date":"2022-12-04T20:14:01.000Z","tags":["SpringSecurity","OAuth2"],"draft":false,"authors":["default"]},"unlisted":false,"prevItem":{"title":"volta \u8bbe\u7f6e\u9ed8\u8ba4node\u7248\u672c","permalink":"/blog/volta-\u8bbe\u7f6e\u9ed8\u8ba4node\u7248\u672c"},"nextItem":{"title":"Spring Security OAuth2 Opaque \u4ee4\u724c\u7684\u7b80\u5355\u4f7f\u7528\u6307\u5357","permalink":"/blog/oauth2-opaque-token"}},"content":"## Spring Security OAuth2 \u5185\u7701\u534f\u8bae\u4e0e JWT \u7ed3\u5408\u4f7f\u7528\u6307\u5357\\n\\n### \u6982\u8ff0\\n\\n\u6211\u4eec\u5df2\u7ecf\u719f\u6089\u4e24\u79cd\u7528\u4e8e\u6388\u6743\u670d\u52a1\u5668\u548c\u53d7\u4fdd\u62a4\u8d44\u6e90\u4e4b\u95f4\u4f20\u9012\u4fe1\u606f\u7684\u65b9\u6cd5\uff1aJWT\uff08[JSON Web Token](https://www.rfc-editor.org/rfc/rfc7519)\uff09\u548c\u4ee4\u724c\u5185\u7701\u3002\\n\u4f46\u5b9e\u9645\u4e0a\uff0c\u5c06\u5b83\u4eec\u7ed3\u5408\u8d77\u6765\u4f7f\u7528\u4e5f\u53ef\u4ee5\u5f97\u5230\u5f88\u597d\u7684\u6548\u679c\u3002\u5c24\u5176\u5728\u53d7\u4fdd\u62a4\u8d44\u6e90\u8981\u63a5\u53d7\u6765\u81ea\u591a\u4e2a\u6388\u6743\u670d\u52a1\u5668\u7684\u4ee4\u724c\u7684\u60c5\u51b5\u4e0b\u7279\u522b\u6709\u7528\u3002\u53d7\u4fdd\u62a4\u8d44\u6e90\u53ef\u4ee5\u5148\u89e3\u6790 JWT\uff0c\u5f04\u6e05\u695a\\n\u4ee4\u724c\u9881\u53d1\u81ea\u54ea\u4e00\u4e2a\u6388\u6743\u670d\u52a1\u5668\uff0c\u7136\u540e\u5411\u5bf9\u5e94\u7684\u6388\u6743\u670d\u52a1\u5668\u53d1\u9001\u5185\u7701\u8bf7\u6c42\u4ee5\u83b7\u53d6\u8be6\u7ec6\u4fe1\u606f\u3002\\n\\n\u8fd9\u7bc7\u6587\u7ae0\u5c06\u4ecb\u7ecd\u5982\u4f55\u5b9e\u73b0Spring Security 5\u8bbe\u7f6e\u8d44\u6e90\u670d\u52a1\u5668\u5b9e\u73b0\u5185\u7701\u534f\u8bae\u4e0eJWT\u7684\u7ed3\u5408\u4f7f\u7528\uff0c\u8ba9\u6211\u4eec\u5f00\u59cb\u5b9e\u8df5\u5427\uff01\\n\\n### \u6388\u6743\u670d\u52a1\u5668\\n\u5728\u672c\u8282\u4e2d\u6211\u4eec\u5c06\u4f7f\u7528 [Spring Authorization Server](https://spring.io/projects/spring-authorization-server) \u642d\u5efa\u6388\u6743\u670d\u52a1\u5668\uff0c\u8bbf\u95ee\u4ee4\u724c\u683c\u5f0f\u4e3a\\nJWT\uff08[JSON Web Token](https://www.rfc-editor.org/rfc/rfc7519)\uff09\u3002\\n\\n#### Maven\u4f9d\u8d56\\n```xml\\n        <dependency>\\n            <groupId>org.springframework.boot</groupId>\\n            <artifactId>spring-boot-starter-security</artifactId>\\n            <version>2.6.7</version>\\n        </dependency>\\n\\n        <dependency>\\n            <groupId>org.springframework.security</groupId>\\n            <artifactId>spring-security-oauth2-authorization-server</artifactId>\\n            <version>0.3.1</version>\\n        </dependency>\\n\\n        <dependency>\\n            <groupId>org.springframework.boot</groupId>\\n            <artifactId>spring-boot-starter-web</artifactId>\\n            <version>2.6.7</version>\\n        </dependency>\\n```\\n\\n#### \u914d\u7f6e\\n\u9996\u5148\u6211\u4eec\u901a\u8fc7`application.yml`\u6307\u5b9a\u670d\u52a1\u7aef\u53e3\uff1a\\n\\n```yaml\\nserver:\\n  port: 8080\\n```\\n\\n\u63a5\u4e0b\u6765\u6211\u4eec\u521b\u5efa`AuthorizationServerConfig`\u914d\u7f6e\u7c7b\uff0c\u5728\u6b64\u7c7b\u4e2d\u6211\u4eec\u5c06\u521b\u5efa\u6388\u6743\u670d\u52a1\u6240\u9700Bean\u3002\u4e0b\u9762\u6211\u4eec\u5c06\u4e3a\u6388\u6743\u670d\u52a1\u5668\u521b\u5efa\u4e00\u4e2aOAuth2\u5ba2\u6237\u7aef\uff0c`RegisteredClient`\\n\u5305\u542b\u5ba2\u6237\u7aef\u4fe1\u606f\uff0c\u5b83\u5c06\u7531`RegisteredClientRepository`\u7ba1\u7406\u3002\\n\\n```java\\n    @Bean\\n    public RegisteredClientRepository registeredClientRepository() {\\n        RegisteredClient registeredClient = RegisteredClient.withId(UUID.randomUUID().toString())\\n                .clientId(\\"relive-client\\")\\n                .clientSecret(\\"{noop}relive-client\\")\\n                .clientAuthenticationMethods(s -> {\\n                    s.add(ClientAuthenticationMethod.CLIENT_SECRET_POST);\\n                    s.add(ClientAuthenticationMethod.CLIENT_SECRET_BASIC);\\n                })\\n                .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)\\n                .authorizationGrantType(AuthorizationGrantType.REFRESH_TOKEN)\\n                .redirectUri(\\"http://127.0.0.1:8070/login/oauth2/code/messaging-client-authorization-code\\")\\n                .scope(\\"message.read\\")\\n                .clientSettings(ClientSettings.builder()\\n                        .requireAuthorizationConsent(true)\\n                        .requireProofKey(false)\\n                        .build())\\n                .tokenSettings(TokenSettings.builder()\\n                        .accessTokenFormat(OAuth2TokenFormat.SELF_CONTAINED)\\n                        .idTokenSignatureAlgorithm(SignatureAlgorithm.RS256)\\n                        .accessTokenTimeToLive(Duration.ofSeconds(30 * 60))\\n                        .refreshTokenTimeToLive(Duration.ofSeconds(60 * 60))\\n                        .reuseRefreshTokens(false)\\n                        .build())\\n                .build();\\n\\n        return new InMemoryRegisteredClientRepository(registeredClient);\\n    }\\n\\n```\\n\u4e0a\u8ff0\u7531`RegisteredClient`\u5b9a\u4e49\u7684OAuth2 \u5ba2\u6237\u7aef\u53c2\u6570\u4fe1\u606f\u8bf4\u660e\u5982\u4e0b\uff1a\\n- **id**: \u552f\u4e00\u6807\u8bc6\\n- **clientId**: \u5ba2\u6237\u7aef\u6807\u8bc6\u7b26\\n- **clientSecret**: \u5ba2\u6237\u7aef\u79d8\u5bc6\\n- **clientAuthenticationMethods**: \u5ba2\u6237\u7aef\u53ef\u80fd\u4f7f\u7528\u7684\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6cd5\u3002\u652f\u6301\u7684\u503c\u4e3a`client_secret_basic`\u3001`client_secret_post`\u3001`private_key_jwt`\u3001`client_secret_jwt`\u548c`none`\\n- **authorizationGrantTypes**: \u5ba2\u6237\u7aef\u53ef\u4ee5\u4f7f\u7528\u7684\u6388\u6743\u7c7b\u578b\u3002\u652f\u6301\u7684\u503c\u4e3a`authorization_code`\u3001`implicit`\u3001`password`\u3001`client_credentials`\u3001`refresh_token`\u548c`urn:ietf:params:oauth:grant-type:jwt-bearer`\\n- **redirectUris**: \u5ba2\u6237\u7aef\u5df2\u6ce8\u518c\u91cd\u5b9a\u5411 URI\\n- **scopes**: \u5141\u8bb8\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u8303\u56f4\\n- **clientSettings**: \u5ba2\u6237\u7aef\u7684\u81ea\u5b9a\u4e49\u8bbe\u7f6e\\n  - **requireAuthorizationConsent**: \u662f\u5426\u9700\u8981\u6388\u6743\u7edf\u540c\u610f\\n  - **requireProofKey**: \u5f53\u53c2\u6570\u4e3atrue\u65f6\uff0c\u8be5\u5ba2\u6237\u7aef\u652f\u6301PCKE\\n- **tokenSettings**: OAuth2 \u4ee4\u724c\u7684\u81ea\u5b9a\u4e49\u8bbe\u7f6e\\n  - **accessTokenFormat**: \u8bbf\u95ee\u4ee4\u724c\u683c\u5f0f\uff0c\u652f\u6301OAuth2TokenFormat.SELF_CONTAINED\uff08\u81ea\u5305\u542b\u7684\u4ee4\u724c\u4f7f\u7528\u53d7\u4fdd\u62a4\u7684\u3001\u6709\u65f6\u95f4\u9650\u5236\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4f8b\u5982JWT\uff09\uff1bOAuth2TokenFormat.REFERENCE\uff08\u4e0d\u900f\u660e\u4ee4\u724c\uff09\\n  - **accessTokenTimeToLive**: access_token\u6709\u6548\u671f\\n  - **refreshTokenTimeToLive**: refresh_token\u6709\u6548\u671f\\n  - **reuseRefreshTokens**: \u662f\u5426\u91cd\u7528\u5237\u65b0\u4ee4\u724c\u3002\u5f53\u53c2\u6570\u4e3atrue\u65f6\uff0c\u5237\u65b0\u4ee4\u724c\u540e\u4e0d\u4f1a\u91cd\u65b0\u751f\u6210\u65b0\u7684refreshToken\\n\\n\\n`ProviderSettings`\u5305\u542bOAuth2\u6388\u6743\u670d\u52a1\u5668\u7684\u914d\u7f6e\u8bbe\u7f6e\u3002\u5b83\u6307\u5b9a\u4e86\u534f\u8bae\u7aef\u70b9\u7684URI\u4ee5\u53ca\u53d1\u884c\u4eba\u6807\u8bc6\u3002\u6b64\u5904*issuer*\u5728\u4e0b\u6587\u5c06\u7531\u53d7\u4fdd\u62a4\u8d44\u6e90\u89e3\u6790\u7528\u4e8e\u533a\u5206\u6388\u6743\u670d\u52a1\u5668\u3002\\n```java\\n    @Bean\\n    public ProviderSettings providerSettings() {\\n        return ProviderSettings.builder()\\n                .issuer(\\"http://127.0.0.1:8080\\")\\n                .build();\\n    }\\n```\\n\\n\u6211\u4eec\u5c06\u901a\u8fc7`OAuth2AuthorizationServerConfiguration`\u5c06OAuth2\u9ed8\u8ba4\u5b89\u5168\u914d\u7f6e\u5e94\u7528\u4e8eHttpSecurity\uff0c\u540c\u65f6\u5bf9\u4e8e\u672a\u8ba4\u8bc1\u8bf7\u6c42\u91cd\u5b9a\u5411\u5230\u767b\u5f55\u9875\u9762\u3002\\n\\n```java\\n    @Bean\\n    @Order(Ordered.HIGHEST_PRECEDENCE)\\n    public SecurityFilterChain authorizationServerSecurityFilterChain(HttpSecurity http) throws Exception {\\n        OAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);\\n        return http.exceptionHandling(exceptions -> exceptions.\\n                authenticationEntryPoint(new LoginUrlAuthenticationEntryPoint(\\"/login\\"))).build();\\n    }\\n```\\n\\n\u6388\u6743\u670d\u52a1\u5668\u9700\u8981\u5176\u7528\u4e8eJWT\u4ee4\u724c\u7684\u7b7e\u540d\u5bc6\u94a5\uff0c\u8ba9\u6211\u4eec\u751f\u6210\u4e00\u4e2a\u7684 RSA \u5bc6\u94a5\uff1a\\n\\n```java\\n    @Bean\\n    public JWKSource<SecurityContext> jwkSource() {\\n        RSAKey rsaKey = Jwks.generateRsa();\\n        JWKSet jwkSet = new JWKSet(rsaKey);\\n        return (jwkSelector, securityContext) -> jwkSelector.select(jwkSet);\\n    }\\n```\\n\\n\u6700\u540e\u6211\u4eec\u5c06\u5b9a\u4e49Spring Security\u5b89\u5168\u914d\u7f6e\u7c7b\uff0c\u5b9a\u4e49Form\u8868\u5355\u8ba4\u8bc1\u65b9\u5f0f\u4fdd\u62a4\u6211\u4eec\u7684\u6388\u6743\u670d\u52a1\u3002\\n\\n```java\\n    @Bean\\n    SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {\\n        http\\n                .authorizeRequests(authorizeRequests ->\\n                        authorizeRequests.anyRequest().authenticated()\\n                )\\n                .formLogin(withDefaults());\\n        return http.build();\\n    }\\n\\n    @Bean\\n    UserDetailsService users() {\\n        UserDetails user = User.withDefaultPasswordEncoder()\\n                .username(\\"admin\\")\\n                .password(\\"password\\")\\n                .roles(\\"USER\\")\\n                .build();\\n        return new InMemoryUserDetailsManager(user);\\n    }\\n\\n    @Bean\\n    PasswordEncoder passwordEncoder() {\\n        return PasswordEncoderFactories.createDelegatingPasswordEncoder();\\n    }\\n```\\n\\n\\n\\n\\n### \u8d44\u6e90\u670d\u52a1\u5668\\n\u672c\u8282\u4e2d\u6211\u4eec\u4f7f\u7528 Spring Security 5 \u8bbe\u7f6eOAuth2 \u53d7\u4fdd\u62a4\u8d44\u6e90\u670d\u52a1\u3002\u901a\u8fc7\u81ea\u5b9a\u4e49\u5b9e\u73b0`AuthenticationManagerResolver`\u5c06 JWT \u4e0e\u5185\u7701\u534f\u8bae\u7ed3\u5408\u4f7f\u7528\u3002\\n\\n\\n#### Maven \u4f9d\u8d56\\n\\n```xml\\n        <dependency>\\n            <groupId>org.springframework.boot</groupId>\\n            <artifactId>spring-boot-starter-web</artifactId>\\n            <version>2.6.7</version>\\n        </dependency>\\n        <dependency>\\n            <groupId>org.springframework.boot</groupId>\\n            <artifactId>spring-boot-starter-security</artifactId>\\n            <version>2.6.7</version>\\n        </dependency>\\n        <dependency>\\n            <groupId>org.springframework.boot</groupId>\\n            <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>\\n            <version>2.6.7</version>\\n        </dependency>\\n        <dependency>\\n            <groupId>org.springframework.boot</groupId>\\n            <artifactId>spring-boot-starter-jdbc</artifactId>\\n            <version>2.6.7</version>\\n        </dependency>\\n        <dependency>\\n            <groupId>org.springframework.boot</groupId>\\n            <artifactId>spring-boot-starter-cache</artifactId>\\n            <version>2.6.7</version>\\n        </dependency>\\n        <dependency>\\n            <groupId>com.github.ben-manes.caffeine</groupId>\\n            <artifactId>caffeine</artifactId>\\n            <version>2.9.3</version>\\n        </dependency>\\n        <dependency>\\n            <groupId>com.nimbusds</groupId>\\n            <artifactId>oauth2-oidc-sdk</artifactId>\\n            <version>9.43.1</version>\\n            <scope>runtime</scope>\\n        </dependency>\\n        <dependency>\\n            <groupId>mysql</groupId>\\n            <artifactId>mysql-connector-java</artifactId>\\n            <version>8.0.28</version>\\n        </dependency>\\n        <dependency>\\n            <groupId>com.alibaba</groupId>\\n            <artifactId>druid-spring-boot-starter</artifactId>\\n            <version>1.2.3</version>\\n        </dependency>\\n```\\n\\n#### \u914d\u7f6e\\n\u9996\u5148\u901a\u8fc7`application.yml`\u914d\u7f6e\u6570\u636e\u5e93\u8fde\u63a5\u548c\u670d\u52a1\u7aef\u53e3\u3002\\n\\n```yaml\\nserver:\\n  port: 8090\\n\\nspring:\\n  application:\\n    name: auth-server\\n  datasource:\\n    druid:\\n      db-type: mysql\\n      driver-class-name: com.mysql.cj.jdbc.Driver\\n      url: jdbc:mysql://localhost:3306/resourceserver-introspection?createDatabaseIfNotExist=true&useUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true\\n      username: <<username>> # update user\\n      password: <<password>> # update password\\n\\n```\\n\\n\u4ee5\u5f80\u6211\u4eec\u914d\u7f6e\u53d7\u4fdd\u62a4\u8d44\u6e90\u670d\u52a1\u901a\u5e38\u4f1a\u5728`application.yml`\u4e2d\u6307\u5b9a `spring.security.resourceserver.jwt`\u6216`spring.security.resourceserver.opaquetoken`\u914d\u7f6e\uff0c\\nSpring Security \u4f1a\u4f7f\u7528`JwtAuthenticationProvider`\u6216`OpaqueTokenAuthenticationProvider` \u9a8c\u8bc1access_token \u3002\\n\\n\u672c\u8282\u4e2d\u6211\u4eec\u5c06\u6839\u636e`AuthenticationManagerResolver`\u83b7\u53d6\u9a8c\u8bc1access_token\u89c4\u5219\u3002\u7531\u4e8eissuer\u4f34\u968f\u7740\u5df2\u7b7e\u7f72\u7684JWT\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528`JwtIssuerAuthenticationManagerResolver`\u5b8c\u6210\u3002\\n\u6211\u4eec\u5c06\u521b\u5efa `AuthenticationManagerResolver`\u7684\u5b9e\u73b0`IntrospectiveIssuerJwtAuthenticationManagerResolver` \u4f5c\u4e3a\u53c2\u6570\u6784\u9020 `JwtIssuerAuthenticationManagerResolver` \u3002\\n\\n```java\\npublic class IntrospectiveIssuerJwtAuthenticationManagerResolver implements AuthenticationManagerResolver<String> {\\n\\n    private final Map<String, AuthenticationManager> authenticationManagers = new ConcurrentHashMap<>();\\n\\n    private final OAuth2IntrospectionService introspectionService;\\n\\n    private final OpaqueTokenIntrospectorSupport opaqueTokenIntrospectorSupport;\\n\\n    public IntrospectiveIssuerJwtAuthenticationManagerResolver(OAuth2IntrospectionService introspectionService,\\n                                                               OpaqueTokenIntrospectorSupport opaqueTokenIntrospectorSupport) {\\n        Assert.notNull(introspectionService, \\"introspectionService can be not null\\");\\n        Assert.notNull(opaqueTokenIntrospectorSupport, \\"opaqueTokenIntrospectorSupport can be not null\\");\\n        this.introspectionService = introspectionService;\\n        this.opaqueTokenIntrospectorSupport = opaqueTokenIntrospectorSupport;\\n    }\\n\\n    @Override\\n    public AuthenticationManager resolve(String issuer) {\\n        OAuth2Introspection oAuth2Introspection = this.introspectionService.loadIntrospection(issuer);\\n\\n        if (oAuth2Introspection != null) {\\n            AuthenticationManager authenticationManager = this.authenticationManagers.computeIfAbsent(issuer,\\n                    (k) -> {\\n                        log.debug(\\"Constructing AuthenticationManager\\");\\n                        OpaqueTokenIntrospector opaqueTokenIntrospector = this.opaqueTokenIntrospectorSupport.fromOAuth2Introspection(oAuth2Introspection);\\n                        return new OpaqueTokenAuthenticationProvider(opaqueTokenIntrospector)::authenticate;\\n                    });\\n            log.debug(LogMessage.format(\\"Resolved AuthenticationManager for issuer \'%s\'\\", issuer).toString());\\n            return authenticationManager;\\n\\n        } else {\\n            log.debug(\\"Did not resolve AuthenticationManager since issuer is not trusted\\");\\n        }\\n        return null;\\n    }\\n}\\n```\\n\\n`OAuth2IntrospectionService`\u7ba1\u7406*OAuth2Introspection*\u5e76\u8d1f\u8d23\u6301\u4e45\u5316\u3002\u5728 OAuth2Introspection \u4e2d\u5305\u542b\u4e86issuer,clientId,clientSecret,introspectionUri\u5c5e\u6027\u4fe1\u606f\u3002\\n\\n`OpaqueTokenIntrospectorSupport`\u8d1f\u8d23\u6839\u636e *OAuth2Introspection* \u521b\u5efa `OpaqueTokenIntrospector`\uff0c\u7528\u4e8e OAuth 2.0 \u4ee4\u724c\u7684\u5185\u7701\u548c\u9a8c\u8bc1\u3002 `OpaqueTokenIntrospector`\u6b64\u63a5\u53e3\u7684\u5b9e\u73b0\u5c06\u5411 OAuth 2.0 \u5185\u7701\u7aef\u70b9\u53d1\u51fa\u8bf7\u6c42\u4ee5\u9a8c\u8bc1\u4ee4\u724c\u5e76\u8fd4\u56de\u5176\u5c5e\u6027\u3002\u5728\u4f7f\u7528\u4ee4\u724c\u5185\u7701\u4f1a\u5bfc\u81f4 OAuth 2.0 \u7cfb\u7edf\u5185\u7684\u7f51\u7edc\u6d41\u91cf\u589e\u52a0\uff0c\\n\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u5141\u8bb8\u53d7\u4fdd\u62a4\u8d44\u6e90\u7f13\u5b58\u7ed9\u5b9a\u4ee4\u724c\u7684\u5185\u7701\u8bf7\u6c42\u7ed3\u679c\u3002\u6211\u4eec\u5c06\u521b\u5efa `OpaqueTokenIntrospector` \u7684\u7f13\u5b58\u5b9e\u73b0 `CachingOpaqueTokenIntrospector`\u3002\u5efa\u8bae\u8bbe\u7f6e\u77ed\u4e8e\u4ee4\u724c\u751f\u547d\u5468\u671f\u7684\u7f13\u5b58\u6709\u6548\u671f\uff0c\u4ee5\u4fbf\u964d\u4f4e\u4ee4\u724c\u88ab\u64a4\u56de\u4f46\u7f13\u5b58\u8fd8\u6709\u6548\u7684\u53ef\u80fd\u6027\u3002\\n\\n```java\\npublic class CachingOpaqueTokenIntrospector implements OpaqueTokenIntrospector {\\n    private final Cache cache;\\n\\n    private final OpaqueTokenIntrospector introspector;\\n\\n    public CachingOpaqueTokenIntrospector(Cache cache, OpaqueTokenIntrospector introspector) {\\n        this.cache = cache;\\n        this.introspector = introspector;\\n    }\\n\\n    @Override\\n    public OAuth2AuthenticatedPrincipal introspect(String token) {\\n        try {\\n            return this.cache.get(token,\\n                    () -> this.introspector.introspect(token));\\n        } catch (Cache.ValueRetrievalException ex) {\\n            throw new OAuth2IntrospectionException(\\"Did not validate token from cache.\\");\\n        } catch (OAuth2IntrospectionException e) {\\n            if (e instanceof BadOpaqueTokenException) {\\n                throw (BadOpaqueTokenException) e;\\n            }\\n            throw new OAuth2IntrospectionException(e.getMessage());\\n        } catch (Exception ex) {\\n            log.error(\\"Token introspection failed.\\", ex);\\n            throw new OAuth2IntrospectionException(\\"Token introspection failed.\\");\\n        }\\n    }\\n}\\n```\\n\\n\\n\u63a5\u4e0b\u6765\u6211\u4eec\u521b\u5efa `OAuth2IntrospectiveResourceServerAuthorizationConfigurer` \u7ee7\u627f `AbstractHttpConfigurer`\uff0c\u5b9e\u73b0\u6211\u4eec\u7684\u5b9a\u5236\u5316\u914d\u7f6e\u3002\\n\\n\\n```java\\npublic class OAuth2IntrospectiveResourceServerAuthorizationConfigurer extends AbstractHttpConfigurer<OAuth2IntrospectiveResourceServerAuthorizationConfigurer, HttpSecurity> {\\n\\n    //...\\n\\n    @Override\\n    public void init(HttpSecurity http) throws Exception {\\n        this.validateConfiguration();\\n        ApplicationContext applicationContext = http.getSharedObject(ApplicationContext.class);\\n        if (this.authenticationManagerResolver == null) {\\n            OAuth2IntrospectionService oAuth2IntrospectionService = applicationContext.getBean(OAuth2IntrospectionService.class);\\n            OpaqueTokenIntrospectorSupport opaqueTokenIntrospectorSupport = this.getOpaqueTokenIntrospectorSupport(applicationContext);\\n\\n            IntrospectiveIssuerJwtAuthenticationManagerResolver introspectiveIssuerJwtAuthenticationManagerResolver =\\n                    new IntrospectiveIssuerJwtAuthenticationManagerResolver(oAuth2IntrospectionService, opaqueTokenIntrospectorSupport);\\n            this.authenticationManagerResolver = introspectiveIssuerJwtAuthenticationManagerResolver;\\n        }\\n        JwtIssuerAuthenticationManagerResolver jwtIssuerAuthenticationManagerResolver =\\n                new JwtIssuerAuthenticationManagerResolver(this.authenticationManagerResolver);\\n        http.oauth2ResourceServer(oauth2 -> oauth2\\n                .authenticationManagerResolver(jwtIssuerAuthenticationManagerResolver)\\n        );\\n    }\\n\\n    //...\\n}\\n\\n```\\n\\n\u6700\u540e\u5b9a\u4e49Spring Security\u5b89\u5168\u914d\u7f6e\u7c7b\uff0c\u901a\u8fc7`http.apply()`\u52a0\u8f7d\u5b9a\u5236\u5316\u914d\u7f6e`OAuth2IntrospectiveResourceServerAuthorizationConfigurer`\u3002\u540c\u65f6\u5b9a\u4e49\\n\u4fdd\u62a4\u7aef\u70b9 /resource/article \u6743\u9650\u4e3a `message.read` \u3002\\n```java\\n@Configuration(proxyBeanMethods = false)\\npublic class SecurityConfig {\\n\\n    @Bean\\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\\n        http\\n                .authorizeHttpRequests(authorizeRequests -> authorizeRequests\\n                        .mvcMatchers(\\"/resource/article\\").hasAuthority(\\"SCOPE_message.read\\")\\n                        .anyRequest().authenticated()\\n                )\\n                .apply(new OAuth2IntrospectiveResourceServerAuthorizationConfigurer())\\n                .opaqueTokenIntrospectorSupport();\\n        return http.build();\\n    }\\n}\\n```\\n\\n> \u7bc7\u5e45\u9650\u5236\u672c\u8282\u4e2d\u6d89\u53ca\u4ee3\u7801\u90fd\u53d6\u81ea\u7247\u6bb5\uff0c\u6e90\u7801\u9644\u5728\u6587\u672b [\u94fe\u63a5](#\u7ed3\u8bba) \u4e2d\u3002\\n\\n\\n\\n### \u6d4b\u8bd5\\n\\nSpring Security \u6784\u9020 OAuth2.0 \u5ba2\u6237\u7aef\u670d\u52a1\u6d41\u7a0b\u6587\u4e2d\u5e76\u6ca1\u6709\u4ecb\u7ecd\uff0c\u5982\u679c\u60a8\u5bf9\u6b64\u6709\u7591\u95ee\uff0c\u53ef\u4ee5\u53c2\u8003\u4ee5\u524d[\u6587\u7ae0](https://relive27.github.io/blog/persisrence-oauth2-client) \u6216\u4ece\u6587\u672b [\u94fe\u63a5](#\u7ed3\u8bba) \u4e2d\u83b7\u53d6\u6e90\u7801\u3002\\n\\n\u6211\u4eec\u5c06\u670d\u52a1\u542f\u52a8\u540e\uff0c\u6d4f\u89c8\u5668\u8bbf\u95ee [http://127.0.0.1:8070/client/test](http://127.0.0.1:8070/client/test)\uff0c\u901a\u8fc7\u8ba4\u8bc1(\u7528\u6237\u540d\u5bc6\u7801\u4e3aadmin/password)\u5e76\u540c\u610f\u6388\u6743\u540e\uff0c\u60a8\u5c06\u770b\u5230\u5982\u4e0b\u6700\u7ec8\u7ed3\u679c\uff1a\\n\\n```json\\n{\\n\\t\\"sub\\": \\"admin\\",\\n\\t\\"articles\\": [\\"Effective Java\\", \\"Spring In Action\\"]\\n}\\n\\n```\\n\\n\\n### \u7ed3\u8bba\\n\\n\u4e0e\u5f80\u5e38\u4e00\u6837\uff0c\u672c\u6587\u4e2d\u4f7f\u7528\u7684\u6e90\u4ee3\u7801\u53ef\u5728 [GitHub](https://github.com/ReLive27/spring-security-oauth2-sample/tree/main/oauth2-introspection-with-jwt) \u4e0a\u83b7\u5f97\u3002"},{"id":"/oauth2-opaque-token","metadata":{"permalink":"/blog/oauth2-opaque-token","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/oauth2-opaque-token.mdx","source":"@site/blog/oauth2-opaque-token.mdx","title":"Spring Security OAuth2 Opaque \u4ee4\u724c\u7684\u7b80\u5355\u4f7f\u7528\u6307\u5357","description":"Spring Security OAuth2 Opaque \u4ee4\u724c\u7684\u7b80\u5355\u4f7f\u7528\u6307\u5357","date":"2022-11-13T13:50:01.000Z","formattedDate":"November 13, 2022","tags":[{"label":"SpringSecurity","permalink":"/blog/tags/spring-security"},{"label":"OAuth2","permalink":"/blog/tags/o-auth-2"}],"readingTime":7.86,"hasTruncateMarker":false,"authors":[{"name":"lzs","title":"Maintainer of Docusaurus","url":"https://github.com/2468979982","imageURL":"https://github.com/2468979982.png","key":"default"}],"frontMatter":{"title":"Spring Security OAuth2 Opaque \u4ee4\u724c\u7684\u7b80\u5355\u4f7f\u7528\u6307\u5357","date":"2022-11-13T13:50:01.000Z","tags":["SpringSecurity","OAuth2"],"draft":false,"authors":["default"]},"unlisted":false,"prevItem":{"title":"Spring Security OAuth2 \u5185\u7701\u534f\u8bae\u4e0e JWT \u7ed3\u5408\u4f7f\u7528\u6307\u5357","permalink":"/blog/oauth2-introspection-with-jwt"},"nextItem":{"title":"Spring Security OAuth2 \u5e26\u6709\u7528\u4e8e\u4ee3\u7801\u4ea4\u6362\u7684\u8bc1\u660e\u5bc6\u94a5 (PKCE) \u7684\u6388\u6743\u7801\u6d41","permalink":"/blog/oauth2-pkce"}},"content":"## Spring Security OAuth2 Opaque \u4ee4\u724c\u7684\u7b80\u5355\u4f7f\u7528\u6307\u5357\\n\\n### \u6982\u8ff0\\n\\nJWT \u662f\u4e00\u79cd\u4ee5\u5e7f\u6cdb\u63a5\u53d7\u7684 JSON \u683c\u5f0f\u5b89\u5168\u4f20\u8f93\u654f\u611f\u4fe1\u606f\u7684\u65b9\u6cd5\u3002\u5305\u542b\u7684\u4fe1\u606f\u53ef\u80fd\u662f\u5173\u4e8e\u7528\u6237\u7684\uff0c\u4e5f\u53ef\u80fd\u662f\u5173\u4e8e\u4ee4\u724c\u672c\u8eab\u7684\uff0c\u4f8b\u5982\u5b83\u7684\u5230\u671f\u65f6\u95f4\u548c\u53d1\u884c\u8005\u3002\\n\u4f46\u662f\u5c06\u4ee4\u724c\u4fe1\u606f\u6253\u5305\u653e\u5165\u4ee4\u724c\u672c\u8eab\u4e5f\u6709\u5176\u4e0d\u8db3\u4e4b\u5904\u3002\u4e3a\u4e86\u5305\u542b\u6240\u6709\u5fc5\u8981\u7684\u58f0\u660e\u4ee5\u53ca\u4fdd\u62a4\u8fd9\u4e9b\u58f0\u660e\u6240\u9700\u7684\u7b7e\u540d\u7ed3\u6784\uff0c\u4ee4\u724c\u5c3a\u5bf8\u4f1a\u53d8\u5f97\u975e\u5e38\u5927\u3002\u800c\u4e14\uff0c\\n\u5982\u679c\u53d7\u4fdd\u62a4\u8d44\u6e90\u5b8c\u5168\u4f9d\u8d56\u4ee4\u724c\u672c\u8eab\u6240\u5305\u542b\u7684\u4fe1\u606f\uff0c\u5219\u4e00\u65e6\u5c06\u6709\u6548\u7684\u4ee4\u724c\u751f\u6210\u5e76\u53d1\u5e03\uff0c\u60f3\u8981\u64a4\u56de\u4f1a\u975e\u5e38\u56f0\u96be\u3002\\n\\nOAuth2 \u4ee4\u724c\u5185\u7701\u534f\u8bae\u5b9a\u4e49\u4e86\u4e00\u79cd\u673a\u5236\uff0c\u8ba9\u53d7\u4fdd\u62a4\u8d44\u6e90\u80fd\u591f\u4e3b\u52a8\u5411\u6388\u6743\u670d\u52a1\u5668\u67e5\u8be2\u4ee4\u724c\u72b6\u6001\u3002\u672c\u6587\u6211\u4eec\u4e0d\u5728\u4f7f\u7528JWT\u7ed3\u6784\u5316\u4ee4\u724c\uff0c\u800c\u662f\u4f7f\u7528\u4e0d\u900f\u660e\u4ee4\u724c\u505a\u4e3a\u8bbf\u95ee\u4ee4\u724c\u3002\\n\u987e\u540d\u601d\u4e49\uff0c\u4e0d\u900f\u660e\u4ee4\u724c\u5c31\u5176\u643a\u5e26\u7684\u4fe1\u606f\u800c\u8a00\u662f\u4e0d\u900f\u660e\u7684\u3002\u4ee4\u724c\u53ea\u662f\u4e00\u4e2a\u6807\u8bc6\u7b26\uff0c\u6307\u5411\u5b58\u50a8\u5728\u6388\u6743\u670d\u52a1\u5668\u4e0a\u7684\u4fe1\u606f\uff1b\u5b83\u901a\u8fc7\u6388\u6743\u670d\u52a1\u5668\u7684\u5185\u7701\u5f97\u5230\u9a8c\u8bc1\u3002\\n\\n\\n### \u6388\u6743\u670d\u52a1\u5668\\n\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u5b66\u4e60\u4f7f\u7528[Spring Authorization Server](https://spring.io/projects/spring-authorization-server)\u8bbe\u7f6e OAuth 2.0 \u6388\u6743\\n\u670d\u52a1\u5668\uff0c\u5e76\u4e14\u6211\u4eec\u5c06\u4f7f\u7528\u4e0d\u900f\u660e\u4ee4\u724c\uff0c\u548c\u4ee5\u5f80\u6587\u7ae0\u4e2d\u6388\u6743\u670d\u52a1\u5668\u751f\u6210JWT\u4ee4\u724c\u914d\u7f6e\u76f8\u6bd4\uff0c\u914d\u7f6e\u8fc7\u7a0b\u4e2d\u4ec5\u6709\u5fae\u5c0f\u7684\u53d8\u52a8\u3002\\n\\n#### Maven\u4f9d\u8d56\\n\\n```xml\\n<dependency>\\n    <groupId>org.springframework.boot</groupId>\\n    <artifactId>spring-boot-starter-security</artifactId>\\n    <version>2.6.7</version>\\n</dependency>\\n\\n<dependency>\\n    <groupId>org.springframework.security</groupId>\\n    <artifactId>spring-security-oauth2-authorization-server</artifactId>\\n    <version>0.3.1</version>\\n</dependency>\\n\\n<dependency>\\n    <groupId>org.springframework.boot</groupId>\\n    <artifactId>spring-boot-starter-web</artifactId>\\n    <version>2.6.7</version>\\n</dependency>\\n```\\n\\n#### \u914d\u7f6e\\n\\n\u9996\u5148\u6211\u4eec\u521b\u5efa`AuthorizationServerConfig`\u914d\u7f6e\u7c7b\u4e3a\u6388\u6743\u670d\u52a1\u5668\u6ce8\u518c\u4e00\u4e2a\u5ba2\u6237\u7aef\uff0c\u6211\u4eec\u5c06\u4f7f\u7528`RegisteredClient`\u5b9a\u4e49\u5ba2\u6237\u7aef\u4fe1\u606f\uff0c\u7531`RegisteredClientRepository`\u5b58\u50a8`RegisteredClient`\u3002\\n\\n```java\\n    @Bean\\n    public RegisteredClientRepository registeredClientRepository() {\\n        RegisteredClient registeredClient = RegisteredClient.withId(UUID.randomUUID().toString())\\n                .clientId(\\"relive-client\\")\\n                .clientSecret(\\"{noop}relive-client\\")\\n                .clientAuthenticationMethods(s -> {\\n                    s.add(ClientAuthenticationMethod.CLIENT_SECRET_POST);\\n                    s.add(ClientAuthenticationMethod.CLIENT_SECRET_BASIC);\\n                })\\n                .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)\\n                .authorizationGrantType(AuthorizationGrantType.REFRESH_TOKEN)\\n                .redirectUri(\\"http://127.0.0.1:8070/login/oauth2/code/messaging-client-authorization-code\\")\\n                .scope(\\"message.read\\")\\n                .clientSettings(ClientSettings.builder()\\n                        .requireAuthorizationConsent(true)\\n                        .requireProofKey(false)\\n                        .build())\\n                .tokenSettings(TokenSettings.builder()\\n                        .accessTokenFormat(OAuth2TokenFormat.REFERENCE)\\n                        .accessTokenTimeToLive(Duration.ofSeconds(30 * 60))\\n                        .refreshTokenTimeToLive(Duration.ofSeconds(60 * 60))\\n                        .reuseRefreshTokens(false)\\n                        .build())\\n                .build();\\n\\n\\n        return new InMemoryRegisteredClientRepository(registeredClient);\\n    }\\n```\\n\u4e0a\u8ff0\u7531`RegisteredClient`\u5b9a\u4e49\u7684OAuth2 \u5ba2\u6237\u7aef\u53c2\u6570\u4fe1\u606f\u8bf4\u660e\u5982\u4e0b\uff1a\\n- **id**: \u552f\u4e00\u6807\u8bc6\\n- **clientId**: \u5ba2\u6237\u7aef\u6807\u8bc6\u7b26\\n- **clientSecret**: \u5ba2\u6237\u7aef\u79d8\u5bc6\\n- **clientAuthenticationMethods**: \u5ba2\u6237\u7aef\u53ef\u80fd\u4f7f\u7528\u7684\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6cd5\u3002\u652f\u6301\u7684\u503c\u4e3a`client_secret_basic`\u3001`client_secret_post`\u3001`private_key_jwt`\u3001`client_secret_jwt`\u548c`none`\\n- **authorizationGrantTypes**: \u5ba2\u6237\u7aef\u53ef\u4ee5\u4f7f\u7528\u7684\u6388\u6743\u7c7b\u578b\u3002\u652f\u6301\u7684\u503c\u4e3a`authorization_code`\u3001`implicit`\u3001`password`\u3001`client_credentials`\u3001`refresh_token`\u548c`urn:ietf:params:oauth:grant-type:jwt-bearer`\\n- **redirectUris**: \u5ba2\u6237\u7aef\u5df2\u6ce8\u518c\u91cd\u5b9a\u5411 URI\\n- **scopes**: \u5141\u8bb8\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u8303\u56f4\\n- **clientSettings**: \u5ba2\u6237\u7aef\u7684\u81ea\u5b9a\u4e49\u8bbe\u7f6e\\n  - **requireAuthorizationConsent**: \u662f\u5426\u9700\u8981\u6388\u6743\u7edf\u540c\u610f\\n  - **requireProofKey**: \u5f53\u53c2\u6570\u4e3atrue\u65f6\uff0c\u8be5\u5ba2\u6237\u7aef\u4ec5\u652f\u6301PCKE\\n- **tokenSettings**: OAuth2 \u4ee4\u724c\u7684\u81ea\u5b9a\u4e49\u8bbe\u7f6e\\n  - **accessTokenFormat**: \u8bbf\u95ee\u4ee4\u724c\u683c\u5f0f\uff0c\u652f\u6301OAuth2TokenFormat.SELF_CONTAINED\uff08\u81ea\u5305\u542b\u7684\u4ee4\u724c\u4f7f\u7528\u53d7\u4fdd\u62a4\u7684\u3001\u6709\u65f6\u95f4\u9650\u5236\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4f8b\u5982JWT\uff09\uff1bOAuth2TokenFormat.REFERENCE\uff08\u4e0d\u900f\u660e\u4ee4\u724c\uff09\\n  - **accessTokenTimeToLive**: access_token\u6709\u6548\u671f\\n  - **refreshTokenTimeToLive**: refresh_token\u6709\u6548\u671f\\n  - **reuseRefreshTokens**: \u662f\u5426\u91cd\u7528\u5237\u65b0\u4ee4\u724c\u3002\u5f53\u53c2\u6570\u4e3atrue\u65f6\uff0c\u5237\u65b0\u4ee4\u724c\u540e\u4e0d\u4f1a\u91cd\u65b0\u751f\u6210\u65b0\u7684refreshToken\\n\\n\\nProviderSettings\u5305\u542bOAuth2\u6388\u6743\u670d\u52a1\u5668\u7684\u914d\u7f6e\u8bbe\u7f6e\u3002\u5b83\u6307\u5b9a\u4e86\u534f\u8bae\u7aef\u70b9\u7684URI\u4ee5\u53ca\u53d1\u884c\u4eba\u6807\u8bc6\u3002\u6211\u4eec\u5c06\u6307\u5b9a\u53d1\u884c\u4eba\u6807\u8bc6\uff0c\u534f\u8bae\u7aef\u70b9\u5ef6\u7528\u9ed8\u8ba4\u914d\u7f6e\u3002\\n```java\\n    @Bean\\n    public ProviderSettings providerSettings() {\\n        return ProviderSettings.builder()\\n                .issuer(\\"http://127.0.0.1:8080\\")\\n                .build();\\n    }\\n```\\n\\nOAuth2AuthorizationServerConfiguration.applyDefaultSecurity(HttpSecurity)\u662f\u4e00\u79cd\u65b9\u4fbf\uff08static\uff09\u5b9e\u7528\u5de5\u5177\u65b9\u6cd5\uff0c\u5c06\u9ed8\u8ba4\u7684OAuth2\u5b89\u5168\u914d\u7f6e\u5e94\u7528\u4e8eHttpSecurity\uff0c\\n\u5b83\u8fd8\u63d0\u4f9b\u5b8c\u5168\u81ea\u5b9a\u4e49OAuth2\u6388\u6743\u670d\u52a1\u5668\u5b89\u5168\u914d\u7f6e\u7684\u80fd\u529b\uff0c\u4e0d\u8fc7\u5728\u672c\u6587\u4e2d\u9ed8\u8ba4\u914d\u7f6e\u5df2\u7ecf\u8db3\u591f\u4f7f\u7528\u4e86\u3002\\n\\n```java\\n    @Bean\\n    @Order(Ordered.HIGHEST_PRECEDENCE)\\n    public SecurityFilterChain authorizationServerSecurityFilterChain(HttpSecurity http) throws Exception {\\n        OAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);\\n        return http.exceptionHandling(exceptions -> exceptions.\\n                authenticationEntryPoint(new LoginUrlAuthenticationEntryPoint(\\"/login\\"))).build();\\n    }\\n```\\n\\n\u6700\u540e\u6211\u4eec\u5c06\u5b9a\u4e49Spring Security\u5b89\u5168\u914d\u7f6e\u7c7b\uff0c\u5b8c\u5584\u8ba4\u8bc1\u529f\u80fd\u4ee5\u4fdd\u62a4\u6211\u4eec\u7684\u670d\u52a1\u3002\\n\\n```java\\n    @Bean\\n    SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {\\n        http\\n                .authorizeRequests(authorizeRequests ->\\n                        authorizeRequests.anyRequest().authenticated()\\n                )\\n                .formLogin(withDefaults());\\n        return http.build();\\n    }\\n\\n    @Bean\\n    UserDetailsService users() {\\n        UserDetails user = User.withDefaultPasswordEncoder()\\n                .username(\\"admin\\")\\n                .password(\\"password\\")\\n                .roles(\\"ADMIN\\")\\n                .build();\\n        return new InMemoryUserDetailsManager(user);\\n    }\\n\\n    @Bean\\n    PasswordEncoder passwordEncoder() {\\n        return PasswordEncoderFactories.createDelegatingPasswordEncoder();\\n    }\\n\\n```\\n\\n\\n\\n### \u8d44\u6e90\u670d\u52a1\u5668\\n\\n\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u5b66\u4e60\u5982\u4f55\u4f7f\u7528 Spring Security 5 \u8bbe\u7f6e OAuth 2.0 \u8d44\u6e90\u670d\u52a1\u5668\u3002\\n\\n#### Maven\u4f9d\u8d56\\n```xml\\n        <dependency>\\n            <groupId>org.springframework.boot</groupId>\\n            <artifactId>spring-boot-starter-web</artifactId>\\n            <version>2.6.7</version>\\n        </dependency>\\n        <dependency>\\n            <groupId>org.springframework.boot</groupId>\\n            <artifactId>spring-boot-starter-security</artifactId>\\n            <version>2.6.7</version>\\n        </dependency>\\n        <dependency>\\n            <groupId>org.springframework.boot</groupId>\\n            <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>\\n            <version>2.6.7</version>\\n        </dependency>\\n        <dependency>\\n            <groupId>com.nimbusds</groupId>\\n            <artifactId>oauth2-oidc-sdk</artifactId>\\n            <version>9.43.1</version>\\n            <scope>runtime</scope>\\n        </dependency>\\n```\\n\\n#### \u914d\u7f6e\\n\\n\u5728\u8fd9\u91cc\u7684application.yml\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u4e0e\u6211\u4eec\u7684\u6388\u6743\u670d\u52a1\u5668\u7684\u5185\u7701\u7aef\u70b9\u76f8\u5bf9\u5e94\u7684\u5185\u7701 uri \u3002\u8fd9\u662f\u9a8c\u8bc1\u4e0d\u900f\u660e\u4ee4\u724c\u7684\u65b9\u5f0f\uff1a\\n\\n```yaml\\nspring:\\n  security:\\n    oauth2:\\n      resourceserver:\\n        opaquetoken:\\n          client-id: relive-client\\n          client-secret: relive-client\\n          introspection-uri: http://127.0.0.1:8080/oauth2/introspect\\nserver:\\n  port: 8090\\n\\n```\\n\\n\u5728\u5b9e\u9645\u4e2d\uff0c\u6388\u6743\u670d\u52a1\u5668\u53ef\u80fd\u7531\u5176\u4ed6\u516c\u53f8\u63d0\u4f9b\uff0c\u9ed8\u8ba4\u7684\u8fde\u63a5\u548c\u8bfb\u53d6\u8d85\u65f6\u53ef\u80fd\u592a\u77ed\uff0c\u6211\u4eec\u5c06\u8c03\u6574\u8d44\u6e90\u670d\u52a1\u5668\u8fde\u63a5\u5230\u6388\u6743\u670d\u52a1\u5668\u7684\u8d85\u65f6\u65f6\u95f4\u3002\\n```java\\n    @Bean\\n    public OpaqueTokenIntrospector introspector(RestTemplateBuilder builder, OAuth2ResourceServerProperties properties) {\\n        RestOperations rest = builder\\n                .basicAuthentication(properties.getOpaquetoken().getClientId(), properties.getOpaquetoken().getClientSecret())\\n                .setConnectTimeout(Duration.ofSeconds(60))\\n                .setReadTimeout(Duration.ofSeconds(60))\\n                .build();\\n\\n        return new NimbusOpaqueTokenIntrospector(properties.getOpaquetoken().getIntrospectionUri(), rest);\\n    }\\n```\\n\\n\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u5b9a\u4e49\u53d7\u4fdd\u62a4\u7aef\u70b9/resource/article\u8bbf\u95ee\u6743\u9650\u4e3amessage.read\uff0c\u8bbf\u95ee\u6743\u9650\u4e0e\u6211\u4eec\u6388\u6743\u670d\u52a1\u5668\u4e3aOAuth2\u5ba2\u6237\u7aef\u914d\u7f6e\u7684`scope`\u4e00\u81f4\uff0c\u7531\u6b64\u5728OAuth2\u5ba2\u6237\u7aef\u7533\u8bf7\u4ee4\u724c\u540e\u624d\u80fd\\n\u8bbf\u95ee\u6b64\u7aef\u70b9\u3002\\n```java\\n    @Bean\\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\\n        http\\n                .authorizeHttpRequests(authorizeRequests -> authorizeRequests\\n                        .mvcMatchers(\\"/resource/article\\").hasAuthority(\\"SCOPE_message.read\\")\\n                        .anyRequest().authenticated()\\n                )\\n                .oauth2ResourceServer(OAuth2ResourceServerConfigurer::opaqueToken);\\n        return http.build();\\n    }\\n\\n```\\n\\n\u6700\u540e\u6211\u4eec\u5efa\u7acb\u4e00\u4e2a REST \u63a7\u5236\u5668\uff0c\u6d4b\u8bd5\u4e2d\u8fd9\u5c06\u7531OAuth2\u5ba2\u6237\u7aef\u901a\u8fc7HTTP\u8bf7\u6c42\u8bbf\u95ee\u3002\\n\\n```java\\n@RestController\\npublic class ArticleController {\\n\\n    @GetMapping(\\"/resource/article\\")\\n    public Map<String, Object> foo(@AuthenticationPrincipal OAuth2AuthenticatedPrincipal principal) {\\n        Map<String, Object> result = new HashMap<>();\\n        result.put(\\"sub\\", principal.getAttribute(\\"sub\\"));\\n        result.put(\\"articles\\", Arrays.asList(\\"Effective Java\\", \\"Spring In Action\\"));\\n\\n        return result;\\n    }\\n}\\n```\\n\\n### \u6d4b\u8bd5\\n\u672c\u6587\u6211\u4eec\u6ca1\u6709\u8bb2\u8ff0OAuth2\u5ba2\u6237\u7aef\u7684\u4f7f\u7528\uff0c\u56e0\u4e3aOAuth2 \u5ba2\u6237\u7aef\u914d\u7f6e\u4e0e\u4e4b\u524d\u6587\u7ae0\u76f8\u6bd4\u5e76\u6ca1\u6709\u4efb\u4f55\u53d8\u5316\u3002\u6240\u4ee5\u6211\u4e0d\u60f3\u6d6a\u8d39\u8bfb\u8005\u9605\u8bfb\u7684\u65f6\u95f4\u82b1\u8d39\u5728\u6b64\u4e4b\u4e0a\uff0c\u5982\u679c\u60a8\u60f3\u4e86\u89e3\u53ef\u4ee5\u53c2\u8003\u4e4b\u524d\u6587\u7ae0\u6216\u8005\u70b9\u51fb\u6587\u672b\u94fe\u63a5\u83b7\u53d6\\n\u6e90\u4ee3\u7801\u3002\\n\\n\u6211\u4eec\u5c06\u670d\u52a1\u542f\u52a8\u540e\uff0c\u6d4f\u89c8\u5668\u8bbf\u95ee[http://127.0.0.1:8070/client/test](http://127.0.0.1:8070/client/test)\uff0c\u901a\u8fc7\u8ba4\u8bc1\u6210\u529f(\u8bb0\u4f4f\u7528\u6237\u540d\u5bc6\u7801\u4e3aadmin/password)\u5e76\u540c\u610f\u6388\u6743\u540e\uff0c\u60a8\u5c06\u770b\u5230\u5982\u4e0b\u6700\u7ec8\u7ed3\u679c\uff1a\\n\\n```json\\n{\\n\\t\\"sub\\": \\"admin\\",\\n\\t\\"articles\\": [\\"Effective Java\\", \\"Spring In Action\\"]\\n}\\n```\\n\\n\\n### \u7ed3\u8bba\\n\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5b66\u4e60\u4e86\u5982\u4f55\u914d\u7f6e\u57fa\u4e8e Spring Security \u7684\u8d44\u6e90\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u6765\u9a8c\u8bc1\u4e0d\u900f\u660e\u4ee4\u724c\u3002\u5728\u4f7f\u7528\u4ee4\u724c\u5185\u7701\u4f1a\u5bfc\u81f4 OAuth 2.0 \u7cfb\u7edf\u5185\u7684\u7f51\u7edc\u6d41\u91cf\u589e\u52a0\u3002\u4e3a\u4e86\u89e3\u51b3\\n\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u5141\u8bb8\u53d7\u4fdd\u62a4\u8d44\u6e90\u7f13\u5b58\u7ed9\u5b9a\u4ee4\u724c\u7684\u5185\u7701\u8bf7\u6c42\u7ed3\u679c\u3002\u5efa\u8bae\u8bbe\u7f6e\u77ed\u4e8e\u4ee4\u724c\u751f\u547d\u5468\u671f\u7684\u7f13\u5b58\u6709\u6548\u671f\uff0c\u4ee5\u4fbf\u964d\u4f4e\u4ee4\u724c\u88ab\u64a4\u56de\u4f46\u7f13\u5b58\u8fd8\u6709\u6548\u7684\u53ef\u80fd\u6027\u3002\\n\\n\u4e0e\u5f80\u5e38\u4e00\u6837\uff0c\u672c\u6587\u4e2d\u4f7f\u7528\u7684\u6e90\u4ee3\u7801\u53ef[\u5728 GitHub \u4e0a](https://github.com/ReLive27/spring-security-oauth2-sample/tree/main/oauth2-opaque-token)\u83b7\u5f97\u3002"},{"id":"/oauth2-pkce","metadata":{"permalink":"/blog/oauth2-pkce","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/oauth2-pkce.mdx","source":"@site/blog/oauth2-pkce.mdx","title":"Spring Security OAuth2 \u5e26\u6709\u7528\u4e8e\u4ee3\u7801\u4ea4\u6362\u7684\u8bc1\u660e\u5bc6\u94a5 (PKCE) \u7684\u6388\u6743\u7801\u6d41","description":"Spring Security OAuth2 \u5e26\u6709\u7528\u4e8e\u4ee3\u7801\u4ea4\u6362\u7684\u8bc1\u660e\u5bc6\u94a5 (PKCE) \u7684\u6388\u6743\u7801\u6d41","date":"2022-07-17T12:21:50.000Z","formattedDate":"July 17, 2022","tags":[{"label":"OAuth2","permalink":"/blog/tags/o-auth-2"},{"label":"SpringSecurity","permalink":"/blog/tags/spring-security"}],"readingTime":10.89,"hasTruncateMarker":false,"authors":[{"name":"lzs","title":"Maintainer of Docusaurus","url":"https://github.com/2468979982","imageURL":"https://github.com/2468979982.png","key":"default"}],"frontMatter":{"title":"Spring Security OAuth2 \u5e26\u6709\u7528\u4e8e\u4ee3\u7801\u4ea4\u6362\u7684\u8bc1\u660e\u5bc6\u94a5 (PKCE) \u7684\u6388\u6743\u7801\u6d41","date":"2022-07-17T12:21:50.000Z","tags":["OAuth2","SpringSecurity"],"draft":false,"authors":["default"]},"unlisted":false,"prevItem":{"title":"Spring Security OAuth2 Opaque \u4ee4\u724c\u7684\u7b80\u5355\u4f7f\u7528\u6307\u5357","permalink":"/blog/oauth2-opaque-token"},"nextItem":{"title":"Spring Security OAuth2\u5ba2\u6237\u7aef\u51ed\u636e\u6388\u6743","permalink":"/blog/oauth2-client-model"}},"content":"## Spring Security OAuth2 \u5e26\u6709\u7528\u4e8e\u4ee3\u7801\u4ea4\u6362\u7684\u8bc1\u660e\u5bc6\u94a5 (PKCE) \u7684\u6388\u6743\u7801\u6d41\\n\\n![](../static/images/blogs/oauth2.png)\\n\\n### \u6982\u8ff0\\n\\nOAuth2\u4f9d\u636e\u662f\u5426\u80fd\u6301\u6709\u5ba2\u6237\u7aef\u5bc6\u94a5\uff0c\u5c06\u5ba2\u6237\u7aef\u5206\u4e3a\u4e24\u79cd\u7c7b\u578b\uff1a**\u516c\u5171\u5ba2\u6237\u7aef**\u548c**\u4fdd\u5bc6\u5ba2\u6237\u7aef**\u3002\\n\\n**\u4fdd\u5bc6\u5ba2\u6237\u7aef**\u5728\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\uff0c\u5728\u524d\u9762\u4ecb\u7ecdOAuth2\u6587\u7ae0\u4e2dSpring Boot\u521b\u5efa\u7684\u5e94\u7528\u7a0b\u5e8f\u662f\u4fdd\u5bc6\u5ba2\u6237\u7aef\u7c7b\u578b\u7684\u793a\u4f8b\u3002\u9996\u5148\u5b83\u4eec\u5728\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\uff0c\u5e76\u4e14\u901a\u5e38\u4f4d\u4e8e\u5177\u6709\u5176\u4ed6\u4fdd\u62a4\u63aa\u65bd\u9632\u706b\u5899\u6216\u7f51\u5173\u7684\u540e\u9762\u3002\\n\\n**\u516c\u5171\u5ba2\u6237\u7aef**\u7684\u4ee3\u7801\u4e00\u822c\u4f1a\u4ee5\u67d0\u79cd\u5f62\u5f0f\u66b4\u9732\u7ed9\u6700\u7ec8\u7528\u6237\uff0c\u8981\u4e48\u662f\u5728\u6d4f\u89c8\u5668\u4e2d\u4e0b\u8f7d\u6267\u884c\uff0c\u8981\u4e48\u662f\u76f4\u63a5\u5728\u7528\u6237\u7684\u8bbe\u5907\u4e0a\u8fd0\u884c\u3002\u4f8b\u5982**\u539f\u751f\u5e94\u7528**\u662f\u76f4\u63a5\u5728\u6700\u7ec8\u7528\u6237\u7684\u8bbe\u5907\uff08\u8ba1\u7b97\u673a\u6216\u8005\u79fb\u52a8\u8bbe\u5907\uff09\u4e0a\u8fd0\u884c\u7684\u5e94\u7528\u3002\u8fd9\u7c7b\u5e94\u7528\u5728\u4f7f\u7528OAuth2\u534f\u8bae\u65f6\uff0c\u6211\u4eec\u65e0\u6cd5\u4fdd\u8bc1\u4e3a\u6b64\u5e94\u7528\u9881\u53d1\u7684\u5ba2\u6237\u7aef\u5bc6\u94a5\u80fd\u5b89\u5168\u7684\u5b58\u50a8\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u5e94\u7528\u7a0b\u5e8f\u5728\u8fd0\u884c\u4e4b\u524d\u4f1a\u5b8c\u5168\u4e0b\u8f7d\u5230\u8bbe\u5907\u4e0a\uff0c\u53cd\u7f16\u8bd1\u5e94\u7528\u7a0b\u5e8f\u5c06\u5b8c\u5168\u663e\u793a\u5ba2\u6237\u7aef\u5bc6\u94a5\u3002\\n\\n\u540c\u6837\u5b58\u5728\u6b64\u5b89\u5168\u95ee\u9898\u8fd8\u6709**\u5355\u9875\u5e94\u7528**\uff08SPA\uff09\uff0c\u6d4f\u89c8\u5668\u672c\u8eab\u662f\u4e00\u4e2a\u4e0d\u5b89\u5168\u7684\u73af\u5883\uff0c\u4e00\u65e6\u4f60\u52a0\u8f7dJavaScript\u5e94\u7528\u7a0b\u5e8f\uff0c\u6d4f\u89c8\u5668\u5c06\u4f1a\u4e0b\u8f7d\u6574\u4e2a\u6e90\u4ee3\u7801\u4ee5\u4fbf\u8fd0\u884c\u5b83\uff0c\u6574\u4e2a\u6e90\u4ee3\u7801\uff0c\u5305\u62ec\u5176\u4e2d\u7684\u4efb\u4f55 \u5ba2\u6237\u7aef\u5bc6\u94a5\uff0c\u90fd\u5c06\u53ef\u89c1\u3002\u5982\u679c\u4f60\u6784\u5efa\u4e00\u4e2a\u62e5\u6709100000\u540d\u7528\u6237\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u90a3\u4e48\u5f88\u53ef\u80fd\u8fd9\u4e9b\u7528\u6237\u4e2d\u7684\u4e00\u90e8\u5206\u5c06\u611f\u67d3\u6076\u610f\u8f6f\u4ef6\u6216\u75c5\u6bd2\uff0c\u5e76\u6cc4\u6f0f\u5ba2\u6237\u7aef\u5bc6\u94a5\u3002\\n\\n\u4f60\u53ef\u80fd\u4f1a\u60f3\uff0c\u201c\u5982\u679c\u6211\u901a\u8fc7\u5c06\u5ba2\u6237\u7aef\u5bc6\u94a5\u62c6\u5206\u4e3a\u51e0\u4e2a\u90e8\u5206\u8fdb\u884c\u6df7\u6dc6\u5462\uff1f\u201d\u8fd9\u4e0d\u53ef\u5426\u8ba4\u4f1a\u4e3a\u4f60\u4e89\u53d6\u70b9\u65f6\u95f4\uff0c\u4f46\u771f\u6b63\u6709\u51b3\u5fc3\u7684\u4eba\u4ecd\u53ef\u80fd\u4f1a\u5f04\u6e05\u695a\u3002\\n\\n\\n\\n\u4e3a\u4e86\u89c4\u907f\u8fd9\u79cd\u5b89\u5168\u98ce\u9669\uff0c\u6700\u597d\u4f7f\u7528\u4ee3\u7801\u4ea4\u6362\u8bc1\u660e\u5bc6\u94a5(PKCE)\u3002\\n\\n### Proof Key for Code Exchange\\n\\nPKCE \u6709\u81ea\u5df1\u72ec\u7acb\u7684[\u89c4\u8303](https://tools.ietf.org/html/rfc7636)\u3002\u5b83\u4f7f\u5e94\u7528\u7a0b\u5e8f\u80fd\u591f\u5728\u516c\u5171\u5ba2\u6237\u7aef\u4e2d\u4f7f\u7528\u6388\u6743\u7801\u6d41\u7a0b\u3002\\n\\n![](../static/images/blogs/PKCE.drawio.png)\\n\\n1. \u7528\u6237\u5728\u5ba2\u6237\u7aef\u8bf7\u6c42\u8d44\u6e90\u3002\\n2. \u5ba2\u6237\u7aef\u521b\u5efa\u5e76\u8bb0\u5f55\u540d\u4e3a code_verifier \u7684\u79d8\u5bc6\u4fe1\u606f\uff0c\u7136\u540e\u5ba2\u6237\u7aef\u6839\u636e code_verifier \u8ba1\u7b97\u51fa code_challenge\uff0c\u5b83\u7684\u503c\u53ef\u4ee5\u662f code_verifier\uff0c\u4e5f\u53ef\u4ee5\u662f code_verifier \u7684 SHA-256 \u6563\u5217\uff0c\u4f46\u662f\u5e94\u8be5\u4f18\u5148\u8003\u8651\u4f7f\u7528\u5bc6\u7801\u6563\u5217\uff0c\u56e0\u4e3a\u5b83\u80fd\u9632\u6b62\u9a8c\u8bc1\u5668\u672c\u8eab\u906d\u5230\u622a\u83b7\u3002\\n\\n3. \u5ba2\u6237\u7aef\u5c06 code_challenge \u4ee5\u53ca\u53ef\u9009\u7684 code_challenge_method(\u4e00\u4e2a\u5173\u952e\u5b57\uff0c\u8868 \u793a\u539f\u6587\u6216\u8005 SHA-256 \u6563\u5217)\u4e0e\u5e38\u89c4\u7684\u6388\u6743\u8bf7\u6c42\u53c2\u6570\u4e00\u8d77\u53d1\u9001\u7ed9\u6388\u6743\u670d\u52a1\u5668\u3002\\n4. \u6388\u6743\u670d\u52a1\u5668\u5c06\u7528\u6237\u91cd\u5b9a\u5411\u5230\u767b\u5f55\u9875\u9762\u3002\\n5. \u7528\u6237\u4f7f\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u5e76\u4e14\u53ef\u80fd\u4f1a\u770b\u5230\u4e00\u4e2a\u540c\u610f\u9875\u9762\uff0c\u5176\u4e2d\u5217\u51fa\u4e86 \u6388\u6743\u670d\u52a1\u5668\u5c06\u6388\u4e88\u5ba2\u6237\u7aef\u7684\u6743\u9650\u3002\\n6. \u6388\u6743\u670d\u52a1\u5668\u5c06 code_challenge \u548c code_challenge_method(\u5982\u679c\u6709 \u7684\u8bdd)\u8bb0\u5f55\u4e0b\u6765\u3002\u6388\u6743\u670d\u52a1\u5668\u4f1a\u5c06\u8fd9\u4e9b\u4fe1\u606f\u4e0e\u9881\u53d1\u7684\u6388\u6743\u7801\u5173\u8054\u8d77\u6765\uff0c\u5e76\u643a\u5e26code\u91cd\u5b9a\u5411\u56de\u5ba2\u6237\u7aef\u3002\\n\\n7. \u5ba2\u6237\u7aef\u63a5\u6536\u5230\u6388\u6743\u7801\u4e4b\u540e\uff0c\u643a\u5e26\u4e4b\u524d\u751f\u6210\u7684 code_verifier \u6267\u884c\u4ee4\u724c\u8bf7\u6c42\u3002\\n\\n8. \u6388\u6743\u670d\u52a1\u5668\u6839\u636ecode_verifier\u8ba1\u7b97\u51fa code_challenge\uff0c\u5e76\u68c0\u67e5\u662f\u5426\u4e0e\u6700\u521d\u63d0\u4ea4\u7684code_challenge\u4e00\u81f4\u3002\\n9. \u6388\u6743\u670d\u52a1\u5668\u5411\u5ba2\u6237\u7aef\u53d1\u9001\u4ee4\u724c\u3002\\n10. \u5ba2\u6237\u7aef\u5411\u53d7\u4fdd\u62a4\u8d44\u6e90\u53d1\u9001\u4ee4\u724c\u3002\\n11. \u53d7\u4fdd\u62a4\u8d44\u6e90\u5411\u5ba2\u6237\u7aef\u8fd4\u56de\u8d44\u6e90\u3002\\n\\n\\n\\n### \u4f7f\u7528Spring Authorization Server\u642d\u5efa\u6388\u6743\u670d\u52a1\u5668\\n\\n\u672c\u8282\u6211\u4eec\u5c06\u4f7f\u7528[Spring Authorization Server](https://spring.io/projects/spring-authorization-server)\u642d\u5efa\u4e00\u4e2a\u6388\u6743\u670d\u52a1\u5668\uff0c\u5e76\u6ce8\u518c\u4e00\u4e2a\u5ba2\u6237\u7aef\u4f7f\u4e4b\u652f\u6301PKCE\u3002\\n\\n#### maven\\n\\n```xml\\n<dependency>\\n  <groupId>org.springframework.boot</groupId>\\n  <artifactId>spring-boot-starter-security</artifactId>\\n  <version>2.6.7</version>\\n</dependency>\\n\\n<dependency>\\n  <groupId>org.springframework.security</groupId>\\n  <artifactId>spring-security-oauth2-authorization-server</artifactId>\\n  <version>0.3.1</version>\\n</dependency>\\n\\n<dependency>\\n  <groupId>org.springframework.boot</groupId>\\n  <artifactId>spring-boot-starter-web</artifactId>\\n  <version>2.6.7</version>\\n</dependency>\\n```\\n\\n#### \u914d\u7f6e\\n\\n\u9996\u5148\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u5c06\u521b\u5efaapplication.yml\u6587\u4ef6\uff0c\u5e76\u6307\u5b9a\u6388\u6743\u670d\u52a1\u5668\u7aef\u53e3\u4e3a8080\uff1a\\n\\n```yaml\\nserver:\\n  port: 8080\\n```\\n\\n<br />\\n\\n\u4e4b\u540e\u6211\u4eec\u5c06\u521b\u5efa\u4e00\u4e2a`OAuth2ServerConfig`\u914d\u7f6e\u7c7b\uff0c\u5e76\u5728\u6b64\u7c7b\u4e2d\u6211\u4eec\u5c06\u521b\u5efaOAuth2\u6388\u6743\u670d\u52a1\u6240\u9700\u7279\u5b9aBean\uff1a\\n\\n```java\\n@Bean\\n@Order(Ordered.HIGHEST_PRECEDENCE)\\npublic SecurityFilterChain authorizationServerSecurityFilterChain(HttpSecurity http) throws Exception {\\n  OAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);\\n  return http.exceptionHandling(exceptions -> exceptions.\\n                                authenticationEntryPoint(new LoginUrlAuthenticationEntryPoint(\\"/login\\"))).build();\\n}\\n\\n@Bean\\npublic RegisteredClientRepository registeredClientRepository() {\\n  RegisteredClient registeredClient = RegisteredClient.withId(UUID.randomUUID().toString())\\n    .clientId(\\"relive-client\\")\\n    .clientAuthenticationMethods(s -> {\\n      s.add(ClientAuthenticationMethod.NONE);//\u5ba2\u6237\u7aef\u8ba4\u8bc1\u6a21\u5f0f\u4e3anone\\n    })\\n    .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)\\n    .redirectUri(\\"http://127.0.0.1:8070/login/oauth2/code/messaging-client-pkce\\")\\n    .scope(\\"message.read\\")\\n    .clientSettings(ClientSettings.builder()\\n                    .requireAuthorizationConsent(true)\\n                    .requireProofKey(true) //\u4ec5\u652f\u6301PKCE\\n                    .build())\\n    .tokenSettings(TokenSettings.builder()\\n                   .accessTokenFormat(OAuth2TokenFormat.SELF_CONTAINED) // \u751f\u6210JWT\u4ee4\u724c\\n                   .idTokenSignatureAlgorithm(SignatureAlgorithm.RS256)\\n                   .accessTokenTimeToLive(Duration.ofSeconds(30 * 60))\\n                   .refreshTokenTimeToLive(Duration.ofSeconds(60 * 60))\\n                   .reuseRefreshTokens(true)\\n                   .build())\\n    .build();\\n\\n  return new InMemoryRegisteredClientRepository(registeredClient);\\n}\\n\\n@Bean\\npublic ProviderSettings providerSettings() {\\n  return ProviderSettings.builder()\\n    .issuer(\\"http://127.0.0.1:8080\\")\\n    .build();\\n}\\n\\n@Bean\\npublic JWKSource<SecurityContext> jwkSource() {\\n  RSAKey rsaKey = Jwks.generateRsa();\\n  JWKSet jwkSet = new JWKSet(rsaKey);\\n  return (jwkSelector, securityContext) -> jwkSelector.select(jwkSet);\\n}\\n\\nstatic class Jwks {\\n\\n  private Jwks() {\\n  }\\n\\n  public static RSAKey generateRsa() {\\n    KeyPair keyPair = KeyGeneratorUtils.generateRsaKey();\\n    RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();\\n    RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();\\n    return new RSAKey.Builder(publicKey)\\n      .privateKey(privateKey)\\n      .keyID(UUID.randomUUID().toString())\\n      .build();\\n  }\\n}\\n\\nstatic class KeyGeneratorUtils {\\n\\n  private KeyGeneratorUtils() {\\n  }\\n\\n  static KeyPair generateRsaKey() {\\n    KeyPair keyPair;\\n    try {\\n      KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\\"RSA\\");\\n      keyPairGenerator.initialize(2048);\\n      keyPair = keyPairGenerator.generateKeyPair();\\n    } catch (Exception ex) {\\n      throw new IllegalStateException(ex);\\n    }\\n    return keyPair;\\n  }\\n}\\n```\\n\\n**\u8bf7\u6ce8\u610f**\u5728\u521b\u5efa*RegisteredClient*\u6ce8\u518c\u5ba2\u6237\u7aef\u7c7b\u4e2d\uff0c1.\u6211\u4eec\u6ca1\u6709\u5b9a\u4e49`client_secret`;2.\u5ba2\u6237\u7aef\u8ba4\u8bc1\u6a21\u5f0f\u6307\u5b9a\u4e3anone\uff1b3.requireProofKey()\u8bbe\u7f6e\u4e3atrue\uff0c\u6b64\u5ba2\u6237\u7aef\u4ec5\u652f\u6301PKCE\u3002\\n\\n\u5176\u4f59\u914d\u7f6e\u6211\u8fd9\u91cc\u5c31\u4e0d\u4e00\u4e00\u8bf4\u660e\uff0c\u53ef\u4ee5\u53c2\u8003[\u4e4b\u524d\u6587\u7ae0](https://relive27.github.io/blog/spring-security-oauth2-jwt)\u3002\\n\\n\\n\\n<br />\\n\\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2aSpring Security\u7684\u914d\u7f6e\u7c7b\uff0c\u6307\u5b9aForm\u8868\u5355\u8ba4\u8bc1\u548c\u8bbe\u7f6e\u7528\u6237\u540d\u5bc6\u7801\uff1a\\n\\n```java\\n@Configuration\\npublic class SecurityConfig {\\n\\n    @Bean\\n    SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {\\n        http\\n                .authorizeRequests(authorizeRequests ->\\n                        authorizeRequests.anyRequest().authenticated()\\n                )\\n                .formLogin(withDefaults());\\n        return http.build();\\n    }\\n\\n    @Bean\\n    UserDetailsService users() {\\n        UserDetails user = User.withDefaultPasswordEncoder()\\n                .username(\\"admin\\")\\n                .password(\\"password\\")\\n                .roles(\\"USER\\")\\n                .build();\\n        return new InMemoryUserDetailsManager(user);\\n    }\\n\\n    @Bean\\n    PasswordEncoder passwordEncoder() {\\n        return PasswordEncoderFactories.createDelegatingPasswordEncoder();\\n    }\\n}\\n\\n```\\n\\n\\n\\n\u81f3\u6b64\u6211\u4eec\u5c31\u5df2\u7ecf\u914d\u7f6e\u597d\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u6388\u6743\u670d\u52a1\u5668\u3002\\n\\n\\n\\n### OAuth2\u5ba2\u6237\u7aef\\n\\n\u672c\u8282\u4e2d\u6211\u4eec\u4f7f\u7528[Spring Security](https://docs.spring.io/spring-security/reference/servlet/oauth2/client/index.html)\u521b\u5efa\u4e00\u4e2a\u5ba2\u6237\u7aef\uff0c\u6b64\u5ba2\u6237\u7aef\u901a\u8fc7PKCE\u6388\u6743\u7801\u6d41\u5411\u6388\u6743\u670d\u52a1\u5668\u8bf7\u6c42\u6388\u6743\uff0c\u5e76\u5c06\u83b7\u53d6\u7684access_token\u53d1\u9001\u5230\u8d44\u6e90\u670d\u52a1\u3002\\n\\n#### maven\\n\\n```xml\\n<dependency>\\n  <groupId>org.springframework.boot</groupId>\\n  <artifactId>spring-boot-starter-web</artifactId>\\n  <version>2.6.7</version>\\n</dependency>\\n<dependency>\\n  <groupId>org.springframework.boot</groupId>\\n  <artifactId>spring-boot-starter-security</artifactId>\\n  <version>2.6.7</version>\\n</dependency>\\n<dependency>\\n  <groupId>org.springframework.boot</groupId>\\n  <artifactId>spring-boot-starter-oauth2-client</artifactId>\\n  <version>2.6.7</version>\\n</dependency>\\n<dependency>\\n  <groupId>org.springframework</groupId>\\n  <artifactId>spring-webflux</artifactId>\\n  <version>5.3.9</version>\\n</dependency>\\n<dependency>\\n  <groupId>io.projectreactor.netty</groupId>\\n  <artifactId>reactor-netty</artifactId>\\n  <version>1.0.9</version>\\n</dependency>\\n\\n```\\n\\n\\n\\n#### \u914d\u7f6e\\n\\n\u9996\u5148\u6211\u4eec\u5c06\u5728application.yml\u4e2d\u914d\u7f6e\u5ba2\u6237\u7aef\u4fe1\u606f\uff0c\u5e76\u6307\u5b9a\u670d\u52a1\u7aef\u53e3\u53f7\u4e3a8070\uff1a\\n\\n```yaml\\nserver:\\n  port: 8070\\n  servlet:\\n    session:\\n      cookie:\\n        name: CLIENT-SESSION\\n\\nspring:\\n  security:\\n    oauth2:\\n      client:\\n        registration:\\n          messaging-client-pkce:\\n            provider: client-provider\\n            client-id: relive-client\\n            client-secret: relive-client\\n            authorization-grant-type: authorization_code\\n            client-authentication-method: none\\n            redirect-uri: \\"http://127.0.0.1:8070/login/oauth2/code/{registrationId}\\"\\n            scope: message.read\\n            client-name: messaging-client-pkce\\n        provider:\\n          client-provider:\\n            authorization-uri: http://127.0.0.1:8080/oauth2/authorize\\n            token-uri: http://127.0.0.1:8080/oauth2/token\\n\\n```\\n\\n<br />\\n\\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u521b\u5efaSpring Security\u914d\u7f6e\u7c7b\uff0c\u542f\u7528OAuth2\u5ba2\u6237\u7aef\u3002\\n\\n```java\\n@Configuration\\npublic class SecurityConfig {\\n\\n    @Bean\\n    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\\n        http\\n                .authorizeRequests(authorizeRequests ->\\n                        //\u4fbf\u4e8e\u6d4b\u8bd5\uff0c\u5c06\u6743\u9650\u5f00\u653e\\n                        authorizeRequests.anyRequest().permitAll()\\n                )\\n                .oauth2Client(withDefaults());\\n        return http.build();\\n    }\\n\\n    @Bean\\n    WebClient webClient(OAuth2AuthorizedClientManager authorizedClientManager) {\\n        ServletOAuth2AuthorizedClientExchangeFilterFunction oauth2Client = new ServletOAuth2AuthorizedClientExchangeFilterFunction(authorizedClientManager);\\n        return WebClient.builder()\\n                .filter(oauth2Client)\\n                .build();\\n    }\\n\\n    @Bean\\n    OAuth2AuthorizedClientManager authorizedClientManager(ClientRegistrationRepository clientRegistrationRepository,\\n                                                          OAuth2AuthorizedClientRepository authorizedClientRepository) {\\n\\n        OAuth2AuthorizedClientProvider authorizedClientProvider = OAuth2AuthorizedClientProviderBuilder\\n                .builder()\\n                .authorizationCode()\\n                .refreshToken()\\n                .build();\\n        DefaultOAuth2AuthorizedClientManager authorizedClientManager = new DefaultOAuth2AuthorizedClientManager(clientRegistrationRepository, authorizedClientRepository);\\n        authorizedClientManager.setAuthorizedClientProvider(authorizedClientProvider);\\n\\n        return authorizedClientManager;\\n    }\\n}\\n\\n```\\n\\n\u4e0a\u8ff0\u914d\u7f6e\u7c7b\u4e2d\u6211\u4eec\u901a\u8fc7*oauth2Client(withDefaults())*\u542f\u7528OAuth2\u5ba2\u6237\u7aef\u3002\u5e76\u521b\u5efa\u4e00\u4e2aWebClient\u5b9e\u4f8b\u7528\u4e8e\u5411\u8d44\u6e90\u670d\u52a1\u5668\u6267\u884cHTTP\u8bf7\u6c42\u3002`OAuth2AuthorizedClientManager`\u8fd9\u662f\u534f\u8c03OAuth2\u6388\u6743\u7801\u8bf7\u6c42\u7684\u9ad8\u7ea7\u63a7\u5236\u5668\u7c7b\uff0c\u4e0d\u8fc7\u6388\u6743\u7801\u6d41\u7a0b\u5e76\u4e0d\u662f\u7531\u5b83\u63a7\u5236\uff0c\u53ef\u4ee5\u67e5\u770b\u5b83\u6240\u7ba1\u7406\u7684*Provider*\u5b9e\u73b0\u7c7b*AuthorizationCodeOAuth2AuthorizedClientProvider*\u4e2d\u5e76\u6ca1\u6709\u6d89\u53ca\u76f8\u5173\u6388\u6743\u7801\u6d41\u7a0b\u4ee3\u7801\u903b\u8f91\uff0c\u5bf9\u4e8eSpring Security\u6388\u6743\u7801\u6a21\u5f0f\u6d89\u53ca\u6838\u5fc3\u63a5\u53e3\u6d41\u7a0b\u6211\u4f1a\u653e\u5728\u4e4b\u540e\u7684\u6587\u7ae0\u7edf\u4e00\u4ecb\u7ecd\u3002\u56de\u5230*OAuth2AuthorizedClientManager*\u7c7b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u540c\u65f6\u8fd8\u6307\u5b9a\u4e86*refreshToken()*,\u5b83\u5b9e\u73b0\u4e86\u5237\u65b0token\u903b\u8f91\uff0c\u5c06\u5728\u8bf7\u6c42\u8d44\u6e90\u670d\u52a1\u8fc7\u7a0b\u4e2daccess_token\u8fc7\u671f\u540e\u5c06\u5237\u65b0token\uff0c\u524d\u63d0\u662frefresh_token\u6ca1\u6709\u8fc7\u671f\uff0c\u5426\u5219\u4f60\u5c06\u91cd\u65b0\u6267\u884cOAuth2\u6388\u6743\u7801\u6d41\u7a0b\u3002\\n\\n<br />\\n\\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2aController\u7c7b\uff0c\u4f7f\u7528WebClient\u8bf7\u6c42\u8d44\u6e90\u670d\u52a1\uff1a\\n\\n```java\\n@RestController\\npublic class PkceClientController {\\n\\n    @Autowired\\n    private WebClient webClient;\\n\\n    @GetMapping(value = \\"/client/test\\")\\n    public List getArticles(@RegisteredOAuth2AuthorizedClient(\\"messaging-client-pkce\\") OAuth2AuthorizedClient authorizedClient) {\\n        return this.webClient\\n                .get()\\n                .uri(\\"http://127.0.0.1:8090/resource/article\\")\\n                .attributes(oauth2AuthorizedClient(authorizedClient))\\n                .retrieve()\\n                .bodyToMono(List.class)\\n                .block();\\n    }\\n}\\n```\\n\\n\\n\\n### \u8d44\u6e90\u670d\u52a1\u5668\\n\\n\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528Spring Security\u642d\u5efa\u4e00\u4e2a\u8d44\u6e90\u670d\u52a1\u5668\u3002\\n\\n#### maven\\n\\n```xml\\n<dependency>\\n  <groupId>org.springframework.boot</groupId>\\n  <artifactId>spring-boot-starter-web</artifactId>\\n  <version>2.6.7</version>\\n</dependency>\\n<dependency>\\n  <groupId>org.springframework.boot</groupId>\\n  <artifactId>spring-boot-starter-security</artifactId>\\n  <version>2.6.7</version>\\n</dependency>\\n<dependency>\\n  <groupId>org.springframework.boot</groupId>\\n  <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>\\n  <version>2.6.7</version>\\n</dependency>\\n```\\n\\n#### \u914d\u7f6e\\n\\n\u901a\u8fc7application.yml\u914d\u7f6e\u8d44\u6e90\u670d\u52a1\u5668\u670d\u52a1\u7aef\u53e38070\uff0c\u5e76\u6307\u5b9a\u6388\u6743\u670d\u52a1\u5668jwk uri\uff0c\u7528\u4e8e\u83b7\u53d6\u516c\u94a5\u4fe1\u606f\u9a8c\u8bc1token\uff1a\\n\\n```yaml\\nserver:\\n  port: 8090\\n\\nspring:\\n  security:\\n    oauth2:\\n      resourceserver:\\n        jwt:\\n          jwk-set-uri: http://127.0.0.1:8080/oauth2/jwks\\n```\\n\\n\\n\\n\u63a5\u4e0b\u6765\u914d\u7f6eSpring Security\u914d\u7f6e\u7c7b\uff0c\u6307\u5b9a\u53d7\u4fdd\u62a4\u7aef\u70b9\u8bbf\u95ee\u6743\u9650\uff1a\\n\\n```java\\n@Configuration\\npublic class SecurityConfig {\\n\\n    @Bean\\n    public SecurityFilterChain defaultSecurityFilter(HttpSecurity http) throws Exception {\\n        http.requestMatchers()\\n                .antMatchers(\\"/resource/article\\")\\n                .and()\\n                .authorizeHttpRequests((authorize) -> authorize\\n                        .antMatchers(\\"/resource/article\\")\\n                        .hasAuthority(\\"SCOPE_message.read\\")\\n                        .mvcMatchers()\\n                )\\n                .oauth2ResourceServer(OAuth2ResourceServerConfigurer::jwt);\\n        return http.build();\\n    }\\n}\\n```\\n\\n\u4e0a\u8ff0\u914d\u7f6e\u7c7b\u4e2d\u6307\u5b9a/resource/article\u5fc5\u987b\u62e5\u6709message.read\u6743\u9650\u624d\u80fd\u8bbf\u95ee\uff0c\u5e76\u914d\u7f6e\u8d44\u6e90\u670d\u52a1\u4f7f\u7528JWT\u8eab\u4efd\u9a8c\u8bc1\u3002\\n\\n<br />\\n\\n\u4e4b\u540e\u6211\u4eec\u5c06\u521b\u5efaController\u7c7b\uff0c\u4f5c\u4e3a\u53d7\u4fdd\u62a4\u7aef\u70b9\uff1a\\n\\n```java\\n@RestController\\npublic class ArticleRestController {\\n\\n    @GetMapping(\\"/resource/article\\")\\n    public List<String> article() {\\n        return Arrays.asList(\\"article1\\", \\"article2\\", \\"article3\\");\\n    }\\n}\\n```\\n\\n\\n\\n### \u8bbf\u95ee\u8d44\u6e90\u5217\u8868\\n\\n\u542f\u52a8\u6240\u6709\u670d\u52a1\u540e\uff0c\u5728\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165 http://127.0.0.1:8070/client/test \uff0c\u901a\u8fc7\u6388\u6743\u670d\u52a1\u5668\u8ba4\u8bc1\u540e\uff0c\u60a8\u5c06\u5728\u9875\u9762\u4e2d\u770b\u5230\u4ee5\u4e0b\u8f93\u51fa\u4fe1\u606f\uff1a\\n\\n```json\\n[\\"article1\\",\\"article2\\",\\"article3\\"]\\n```\\n\\n\\n\\n### \u7ed3\u8bba\\n\\n\u5728Spring Security\u76ee\u524d\u7248\u672c\u4e2d\u4fdd\u5bc6\u5ba2\u6237\u7aef\u7684 PKCE \u5df2\u7ecf\u6210\u4e3a\u9ed8\u8ba4\u884c\u4e3a\u3002\u5728\u4fdd\u5bc6\u5ba2\u6237\u7aef\u6388\u6743\u7801\u6a21\u5f0f\u4e2d\u540c\u6837\u53ef\u4ee5\u4f7f\u7528PKCE\u3002\\n\\n\u4e0e\u5f80\u5e38\u4e00\u6837\uff0c\u672c\u6587\u4e2d\u4f7f\u7528\u7684\u6e90\u4ee3\u7801\u53ef[\u5728 GitHub \u4e0a](https://github.com/ReLive27/spring-security-oauth2-sample/tree/main/oauth2-pkce)\u83b7\u5f97\u3002"},{"id":"/oauth2-client-model","metadata":{"permalink":"/blog/oauth2-client-model","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/oauth2-client-model.mdx","source":"@site/blog/oauth2-client-model.mdx","title":"Spring Security OAuth2\u5ba2\u6237\u7aef\u51ed\u636e\u6388\u6743","description":"Spring Security OAuth2\u5ba2\u6237\u7aef\u51ed\u636e\u6388\u6743","date":"2022-07-09T18:22:26.000Z","formattedDate":"July 9, 2022","tags":[{"label":"SpringSecurity","permalink":"/blog/tags/spring-security"},{"label":"OAuth2","permalink":"/blog/tags/o-auth-2"}],"readingTime":6.975,"hasTruncateMarker":false,"authors":[{"name":"lzs","title":"Maintainer of Docusaurus","url":"https://github.com/2468979982","imageURL":"https://github.com/2468979982.png","key":"default"}],"frontMatter":{"title":"Spring Security OAuth2\u5ba2\u6237\u7aef\u51ed\u636e\u6388\u6743","date":"2022-07-09T18:22:26.000Z","tags":["SpringSecurity","OAuth2"],"draft":false,"authors":["default"]},"unlisted":false,"prevItem":{"title":"Spring Security OAuth2 \u5e26\u6709\u7528\u4e8e\u4ee3\u7801\u4ea4\u6362\u7684\u8bc1\u660e\u5bc6\u94a5 (PKCE) \u7684\u6388\u6743\u7801\u6d41","permalink":"/blog/oauth2-pkce"},"nextItem":{"title":"Welcome","permalink":"/blog/welcome"}},"content":"## Spring Security OAuth2\u5ba2\u6237\u7aef\u51ed\u636e\u6388\u6743\\n\\n### \u6982\u8ff0\\n\\n\u5728\u6ca1\u6709\u660e\u786e\u7684\u8d44\u6e90\u62e5\u6709\u8005\uff0c\u6216\u5bf9\u4e8e\u5ba2\u6237\u7aef\u6765\u8bf4\u8d44\u6e90\u62e5\u6709\u8005\u4e0d\u53ef\u533a\u5206\uff0c\u8be5\u600e\u4e48\u529e\uff1f\u8fd9\u662f\u4e00\u79cd\u76f8\u5f53\u5e38\u89c1\u7684\u573a\u666f\u3002\u6bd4\u5982\u540e\u7aef\u7cfb\u7edf\u4e4b\u95f4\u9700\u8981\u76f4\u63a5\u901a\u4fe1\u65f6\uff0c\u5c06\u4f7f\u7528**\u5ba2\u6237\u7aef\u51ed\u636e\u6388\u6743**\u3002\\n\\nOAuth2.0\u6587\u6863\u63cf\u8ff0\u5ba2\u6237\u7aef\u51ed\u636e\u6388\u6743\uff1a\\n\\n> \u5ba2\u6237\u7aef\u4f7f\u7528\u5ba2\u6237\u7aef\u51ed\u636e\u6388\u4e88\u7c7b\u578b\u6765\u83b7\u53d6\u7528\u6237\u4e0a\u4e0b\u6587\u4e4b\u5916\u7684\u8bbf\u95ee\u4ee4\u724c\u3002\u8fd9\u901a\u5e38\u88ab\u5ba2\u6237\u7aef\u7528\u6765\u8bbf\u95ee\u5173\u4e8e\u4ed6\u4eec\u81ea\u5df1\u7684\u8d44\u6e90\uff0c\u800c\u4e0d\u662f\u8bbf\u95ee\u7528\u6237\u7684\u8d44\u6e90\u3002\\n\\n\\n\\n\u5728\u672c\u6587\u4e2d\uff0c\u60a8\u5c06\u4e86\u89e3\u4f7f\u7528Spring Security\u6784\u5efaOAuth2\u5ba2\u6237\u7aef\u51ed\u636e\u6388\u6743\uff0c\u5728\u6ca1\u6709\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u7684\u60c5\u51b5\u4e0b\u5141\u8bb8\u670d\u52a1\u5b89\u5168\u7684\u76f8\u4e92\u64cd\u4f5c\u3002\\n\\n\\n\\nOAuth2\u5ba2\u6237\u7aef\u51ed\u636e\u6388\u6743\u76f8\u6bd4\u4e8e\u6388\u6743\u7801\u6388\u6743\u66f4\u76f4\u63a5\uff0c\u5b83\u901a\u5e38\u7528\u4e8eCRON\u4efb\u52a1\u548c\u5176\u4ed6\u7c7b\u578b\u7684\u540e\u7aef\u6570\u636e\u5904\u7406\u7b49\u64cd\u4f5c\u3002\\n\\n\\n\\n### \u5ba2\u6237\u7aef\u51ed\u636e\u6388\u4e88\u6d41\u7a0b\\n\\n\u5f53\u5e94\u7528\u7a0b\u5e8f\u8bf7\u6c42\u8bbf\u95ee\u4ee4\u724c\u4ee5\u8bbf\u95ee\u5176\u4ed6\u7684\u8d44\u6e90\u65f6\uff0c\u5c06\u4f7f\u7528\u5ba2\u6237\u7aef\u51ed\u636e\u6388\u6743\uff0c\u800c\u4e0d\u662f\u4ee3\u8868\u7528\u6237\u3002\\n\\n#### \u8bf7\u6c42\u53c2\u6570\\n\\n##### grant_type\uff08\u5fc5\u9700\uff09\\n\\n\u8be5`grant_type`\u53c2\u6570\u5fc5\u987b\u8bbe\u7f6e\u4e3a`client_credentials`\u3002\\n\\n##### scope\uff08\u53ef\u9009\u7684\uff09\\n\\n\u60a8\u7684\u670d\u52a1\u53ef\u4ee5\u652f\u6301\u5ba2\u6237\u7aef\u51ed\u636e\u6388\u4e88\u7684\u4e0d\u540c\u8303\u56f4\u3002\\n\\n##### \u5ba2\u6237\u7aef\u8eab\u4efd\u9a8c\u8bc1\uff08\u5fc5\u9700\uff09\\n\\n\u5ba2\u6237\u7aef\u9700\u8981\u5bf9\u6b64\u8bf7\u6c42\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002\u901a\u5e38\uff0c\u8be5\u670d\u52a1\u5c06\u5141\u8bb8\u9644\u52a0\u8bf7\u6c42\u53c2\u6570`client_id`\u548c`client_secret`\uff0c\u6216\u63a5\u53d7 HTTP Basic auth \u6807\u5934\u4e2d\u7684\u5ba2\u6237\u7aef ID \u548c\u673a\u5bc6\u3002\\n\\n![](../static/images/blogs/client-credentials.png)\\n\\n\\n\\n### OAuth2\u6388\u6743\u670d\u52a1\u5668\\n\\n\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528[Spring Authorization Server](https://spring.io/projects/spring-authorization-server#learn)\u6784\u5efaOAuth2\u6388\u6743\u670d\u52a1\u5668\uff0c\u5177\u4f53\u8be6\u7ec6\u7ec6\u8282\u6211\u8fd9\u91cc\u5c31\u4e0d\u91cd\u590d\u8d58\u8ff0\uff0c\u53ef\u4ee5\u53c2\u8003\u6b64\u6587[JWT\u4e0eSpring Security OAuth2\u7ed3\u5408\u4f7f\u7528](https://relive27.github.io/2022/06/26/spring-security-oauth2-jwt/)\u4e2d\u6388\u6743\u670d\u52a1\u5668\u642d\u5efa\uff0c\u8fd9\u91cc\u4ec5\u8bf4\u660e\u4e0e\u4e4b\u524d\u6388\u6743\u7801\u6388\u4e88\u6d41\u7a0b\u6388\u6743\u670d\u52a1\u914d\u7f6e\u7684\u4e0d\u540c\u4e4b\u5904\u3002\\n\\n#### \u914d\u7f6e\\n\\n\u5728\u6211\u4eec\u4f7f\u7528*RegisteredClient*\u6784\u5efa\u5668\u7c7b\u578b\u521b\u5efa\u4e00\u4e2a\u5ba2\u6237\u7aef\uff0c\u5c06\u914d\u7f6e\u6b64\u5ba2\u6237\u7aef\u652f\u6301\u5ba2\u6237\u7aef\u51ed\u636e\u6388\u6743\uff0c\u5e76\u7b80\u5355\u7684\u5c06\u5b83\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\u3002\\n\\n```java\\n@Bean\\npublic RegisteredClientRepository registeredClientRepository() {\\n  RegisteredClient registeredClient = RegisteredClient.withId(UUID.randomUUID().toString())\\n    .clientId(\\"relive-client\\")\\n    .clientSecret(\\"{noop}relive-client\\")\\n    .clientAuthenticationMethods(s -> {\\n      s.add(ClientAuthenticationMethod.CLIENT_SECRET_POST);\\n      s.add(ClientAuthenticationMethod.CLIENT_SECRET_BASIC);\\n    })\\n    .authorizationGrantType(AuthorizationGrantType.CLIENT_CREDENTIALS)\\n    .redirectUri(\\"http://127.0.0.1:8070/login/oauth2/code/messaging-client-model\\")\\n    .scope(\\"message.read\\")\\n    .clientSettings(ClientSettings.builder()\\n                    .requireAuthorizationConsent(true)\\n                    .requireProofKey(false)\\n                    .build())\\n    .tokenSettings(TokenSettings.builder()\\n                   .accessTokenFormat(OAuth2TokenFormat.SELF_CONTAINED)\\n                   .idTokenSignatureAlgorithm(SignatureAlgorithm.RS256)\\n                   .accessTokenTimeToLive(Duration.ofSeconds(30 * 60))\\n                   .refreshTokenTimeToLive(Duration.ofSeconds(60 * 60))\\n                   .reuseRefreshTokens(true)\\n                   .build())\\n    .build();\\n\\n  return new InMemoryRegisteredClientRepository(registeredClient);\\n}\\n```\\n\\n\u4e0a\u8ff0\u6211\u4eec\u914d\u7f6e\u4e86\u4e00\u4e2aOAuth2\u5ba2\u6237\u7aef\uff0c\u5e76\u5c06*authorizationGrantType*\u6307\u5b9a\u4e3a**client_credentials**\uff1a\\n\\n- **clientId**: relive-client\\n- **clientSecret**: relive-client\\n- **redirectUri**: http://127.0.0.1:8070/login/oauth2/code/messaging-client-model\\n- **scope**: message.read\\n\\n\\n\\n### \u4f7f\u7528Spring Security\u6784\u5efaOAuth2\u8d44\u6e90\u670d\u52a1\u5668\\n\\nOAuth2\u8d44\u6e90\u670d\u52a1\u5668\u914d\u7f6e\u4e0e\u6b64\u6587[JWT\u4e0eSpring Security OAuth2\u7ed3\u5408\u4f7f\u7528](https://relive27.github.io/blog/spring-security-oauth2-jwt)\u4e2d\u8d44\u6e90\u670d\u52a1\u642d\u5efa\u4e00\u81f4\uff0c\u60a8\u53ef\u4ee5\u53c2\u8003\u6b64\u6587\u4e2dOAuth2\u8d44\u6e90\u670d\u52a1\u4ecb\u7ecd\uff0c\u6216\u53ef\u4ee5\u5728\u6587\u672b\u4e2d\u83b7\u53d6\u672c\u6587\u6e90\u7801\u5730\u5740\u8fdb\u884c\u67e5\u770b\u3002\\n\\n#### \u914d\u7f6e\\n\\nOAuth2\u8d44\u6e90\u670d\u52a1\u5668\u63d0\u4f9b\u4e86\u4e00\u4e2a/*resource*/*article*\u53d7\u4fdd\u62a4\u7aef\u70b9\uff0c\u5e76\u4f7f\u7528Spring Security\u4fdd\u62a4\u6b64\u670d\u52a1\u3002\\n\\n```java\\n@Bean\\nSecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\\n  http.requestMatchers()\\n    .antMatchers(\\"/resource/article\\")\\n    .and()\\n    .authorizeRequests()\\n    .mvcMatchers(\\"/resource/article\\")\\n    .access(\\"hasAuthority(\'SCOPE_message.read\')\\")\\n    .and()\\n    .oauth2ResourceServer(OAuth2ResourceServerConfigurer::jwt);\\n  return http.build();\\n}\\n```\\n\\n\u8bf7\u6ce8\u610f\uff0cOAuth2\u8d44\u6e90\u670d\u52a1/*resource*/*article*\u7aef\u70b9\u8981\u6c42\u62e5\u6709\u201cmessage.read\u201d\u6743\u9650\u624d\u53ef\u4ee5\u8bbf\u95ee\uff0cSpring \u81ea\u52a8\u5728\u6240\u9700\u8303\u56f4\u540d\u79f0\u524d\u6dfb\u52a0\u201cSCOPE_\u201d\uff0c\u8fd9\u6837\u5b9e\u9645\u6240\u9700\u7684\u8303\u56f4\u662f\u201cmessage.read\u201d\u800c\u4e0d\u662f\u201cSCOPE_message.read\u201d\u3002\\n\\n\\n\\n### \u4f7f\u7528Spring Security\u6784\u5efaOAuth2\u5ba2\u6237\u7aef\\n\\n\u5728\u672c\u8282\u4e2d\uff0c\u60a8\u5c06\u4f7f\u7528\u5f53\u524d\u63a8\u8350\u7684WebClient\uff0cWebClient \u662f Spring \u7684 WebFlux \u5305\u7684\u4e00\u90e8\u5206\u3002\u8fd9\u662f Spring \u7684\u53cd\u5e94\u5f0f\u3001\u975e\u963b\u585e API\uff0c\u60a8\u53ef\u4ee5\u5728[Spring\u6587\u6863](https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html)\u4e2d\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u3002\\n\\n\\n\\n\u5728\u6b64\u5ba2\u6237\u7aef\u4e2d\uff0c\u5728`@Scheduled`\u6b64\u6ce8\u89e3\u5b9a\u4e49\u7684CRON\u4efb\u52a1\u4e0b\uff0c\u60a8\u5c06\u4f7f\u7528`WebClient`\u6765\u53d1\u51fa\u8bf7\u6c42\u3002\\n\\n\\n\\n#### maven\u4f9d\u8d56\\n\\n```xml\\n<dependency>\\n  <groupId>org.springframework.boot</groupId>\\n  <artifactId>spring-boot-starter-web</artifactId>\\n  <version>2.6.7</version>\\n</dependency>\\n<dependency>\\n  <groupId>org.springframework.boot</groupId>\\n  <artifactId>spring-boot-starter-security</artifactId>\\n  <version>2.6.7</version>\\n</dependency>\\n<dependency>\\n  <groupId>org.springframework.boot</groupId>\\n  <artifactId>spring-boot-starter-oauth2-client</artifactId>\\n  <version>2.6.7</version>\\n</dependency>\\n<dependency>\\n  <groupId>org.springframework</groupId>\\n  <artifactId>spring-webflux</artifactId>\\n  <version>5.3.9</version>\\n</dependency>\\n<dependency>\\n  <groupId>io.projectreactor.netty</groupId>\\n  <artifactId>reactor-netty</artifactId>\\n  <version>1.0.9</version>\\n</dependency>\\n```\\n\\n#### \u914d\u7f6e\\n\\n\u6211\u4eec\u5c06\u5728application.yml\u4e2d\u914d\u7f6eOAuth2\u6388\u6743\u4fe1\u606f\uff0c\u5e76\u6307\u5b9aOAuth2\u5ba2\u6237\u7aef\u670d\u52a1\u7aef\u53e3\u53f7\uff1a\\n\\n```yaml\\nserver:\\n  port: 8070\\n\\nspring:\\n  security:\\n    oauth2:\\n      client:\\n        registration:\\n          messaging-client-model:\\n            provider: client-provider\\n            client-id: relive-client\\n            client-secret: relive-client\\n            authorization-grant-type: client_credentials\\n            client-authentication-method: client_secret_post\\n            scope: message.read\\n            client-name: messaging-client-model\\n        provider:\\n          client-provider:\\n            token-uri: http://127.0.0.1:8080/oauth2/token\\n```\\n\\n<br />\\n\\n\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u521b\u5efa\u4e00\u4e2a*SecurityConfig*\u7c7b\u7528\u6765\u914d\u7f6eSpring Security OAuth2\u5ba2\u6237\u7aef\u6240\u9700Bean\uff1a\\n\\n```java\\n@Bean\\nSecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\\n  http\\n    .authorizeRequests(authorizeRequests ->\\n                       authorizeRequests.anyRequest().permitAll()\\n                      )\\n    .oauth2Client(withDefaults());\\n  return http.build();\\n}\\n\\n@Bean\\nWebClient webClient(OAuth2AuthorizedClientManager authorizedClientManager) {\\n  ServletOAuth2AuthorizedClientExchangeFilterFunction oauth2Client = new ServletOAuth2AuthorizedClientExchangeFilterFunction(authorizedClientManager);\\n  return WebClient.builder()\\n    .filter(oauth2Client)\\n    .build();\\n}\\n\\n@Bean\\nOAuth2AuthorizedClientManager authorizedClientManager(ClientRegistrationRepository clientRegistrationRepository,\\n                                                      OAuth2AuthorizedClientService authorizedClientService) {\\n\\n  OAuth2AuthorizedClientProvider authorizedClientProvider = OAuth2AuthorizedClientProviderBuilder\\n    .builder()\\n    .clientCredentials()\\n    .build();\\n  AuthorizedClientServiceOAuth2AuthorizedClientManager authorizedClientManager = new AuthorizedClientServiceOAuth2AuthorizedClientManager(clientRegistrationRepository, authorizedClientService);\\n  authorizedClientManager.setAuthorizedClientProvider(authorizedClientProvider);\\n\\n  return authorizedClientManager;\\n}\\n```\\n\\n\u6211\u4eec\u521b\u5efa\u4e00\u4e2aWebClient\u5b9e\u4f8b\u7528\u4e8e\u5411\u8d44\u6e90\u670d\u52a1\u5668\u6267\u884cHTTP\u8bf7\u6c42\uff0c\u5e76\u7ed9WebClient\u6dfb\u52a0\u4e86\u4e00\u4e2aOAuth2\u6388\u6743\u8fc7\u6ee4\u5668\u3002`AuthorizedClientServiceOAuth2AuthorizedClientManager`\u8fd9\u662f\u534f\u8c03OAuth2\u5ba2\u6237\u7aef\u51ed\u636e\u6388\u4e88\u8bf7\u6c42\u7684\u9ad8\u7ea7\u63a7\u5236\u5668\u7c7b\uff0c\u8fd9\u91cc\u6211\u5c06\u6307\u51fa`AuthorizedClientServiceOAuth2AuthorizedClientManager`\u662f\u4e00\u4e2a\u4e13\u95e8\u8bbe\u8ba1\u7528\u4e8e\u5728 HttpServletRequest \u7684\u4e0a\u4e0b\u6587\u4e4b\u5916\u4f7f\u7528\u7684\u7c7b\u3002\\n\\n\u6765\u81ea[Spring \u6587\u6863](https://docs.spring.io/spring-security/site/docs/5.4.5/reference/html5/#oauth2Client-authorized-manager-provider)\uff1a\\n\\n> DefaultOAuth2AuthorizedClientManager \u65e8\u5728\u7528\u4e8e HttpServletRequest \u7684\u4e0a\u4e0b\u6587\u4e2d\u3002\u5728 HttpServletRequest \u4e0a\u4e0b\u6587\u4e4b\u5916\u64cd\u4f5c\u65f6\uff0c\u8bf7\u6539\u7528 AuthorizedClientServiceOAuth2AuthorizedClientManager\u3002\\n\\n\\n\\n<br />\\n\\n\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u521b\u5efa\u4f7f\u7528`@Scheduled`\u6ce8\u89e3\u5b9a\u4e49\u7684\u4efb\u52a1\uff0c\u5e76\u6ce8\u5165WebClient\u8c03\u7528\u8d44\u6e90\u670d\u52a1\u8bf7\u6c42\uff1a\\n\\n```java\\n@Service\\npublic class ArticleJob {\\n\\n  @Autowired\\n  private WebClient webClient;\\n\\n  @Scheduled(cron = \\"0/2 * * * * ? \\")\\n  public void exchange() {\\n    List list = this.webClient\\n      .get()\\n      .uri(\\"http://127.0.0.1:8090/resource/article\\")\\n      .attributes(clientRegistrationId(\\"messaging-client-model\\"))\\n      .retrieve()\\n      .bodyToMono(List.class)\\n      .block();\\n    log.info(\\"\u8c03\u7528\u8d44\u6e90\u670d\u52a1\u5668\u6267\u884c\u7ed3\u679c\uff1a\\" + list);\\n  }\\n}\\n\\n```\\n\\n\u8fd9\u4e2a\u7c7b\u4e2d`exchange()`\u65b9\u6cd5\u4f7f\u7528`@Scheduled`\u6ce8\u89e3\u6bcf2\u79d2\u89e6\u53d1\u4e00\u6b21\u8bf7\u6c42\uff0c\u5728\u6211\u4eec\u542f\u52a8\u6240\u6709\u670d\u52a1\u540e\uff0c\u4f60\u5e94\u8be5\u770b\u5230\u8fd9\u6837\u7684\u8f93\u51fa\uff1a\\n\\n```\\n2022-07-09 19:55:22.281  INFO 20305 --- [   scheduling-1] com.relive.ArticleJob                    : \u8c03\u7528\u8d44\u6e90\u670d\u52a1\u5668\u6267\u884c\u7ed3\u679c\uff1a[article1, article2, article3]\\n2022-07-09 19:55:24.023  INFO 20305 --- [   scheduling-1] com.relive.ArticleJob                    : \u8c03\u7528\u8d44\u6e90\u670d\u52a1\u5668\u6267\u884c\u7ed3\u679c\uff1a[article1, article2, article3]\\n2022-07-09 19:55:26.015  INFO 20305 --- [   scheduling-1] com.relive.ArticleJob                    : \u8c03\u7528\u8d44\u6e90\u670d\u52a1\u5668\u6267\u884c\u7ed3\u679c\uff1a[article1, article2, article3]\\n2022-07-09 19:55:28.009  INFO 20305 --- [   scheduling-1] com.relive.ArticleJob                    : \u8c03\u7528\u8d44\u6e90\u670d\u52a1\u5668\u6267\u884c\u7ed3\u679c\uff1a[article1, article2, article3]\\n```\\n\\n\\n\\n### \u7ed3\u8bba\\n\\n\u4e0e\u5f80\u5e38\u4e00\u6837\uff0c\u672c\u6587\u4e2d\u4f7f\u7528\u7684\u6e90\u4ee3\u7801\u53ef[\u5728 GitHub \u4e0a](https://github.com/ReLive27/spring-security-oauth2-sample/tree/main/oauth2-client-model)\u83b7\u5f97\u3002"},{"id":"welcome","metadata":{"permalink":"/blog/welcome","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2021-08-26-welcome/index.md","source":"@site/blog/2021-08-26-welcome/index.md","title":"Welcome","description":"Docusaurus blogging features are powered by the blog plugin.","date":"2021-08-26T00:00:00.000Z","formattedDate":"August 26, 2021","tags":[{"label":"facebook","permalink":"/blog/tags/facebook"},{"label":"hello","permalink":"/blog/tags/hello"},{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":0.405,"hasTruncateMarker":false,"authors":[{"name":"S\xe9bastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","imageURL":"https://github.com/slorber.png","key":"slorber"},{"name":"Yangshun Tay","title":"Front End Engineer @ Facebook","url":"https://github.com/yangshun","imageURL":"https://github.com/yangshun.png","key":"yangshun"}],"frontMatter":{"slug":"welcome","title":"Welcome","authors":["slorber","yangshun"],"tags":["facebook","hello","docusaurus"]},"unlisted":false,"prevItem":{"title":"Spring Security OAuth2\u5ba2\u6237\u7aef\u51ed\u636e\u6388\u6743","permalink":"/blog/oauth2-client-model"},"nextItem":{"title":"MDX Blog Post","permalink":"/blog/mdx-blog-post"}},"content":"[Docusaurus blogging features](https://docusaurus.io/docs/blog) are powered by the [blog plugin](https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog).\\n\\nSimply add Markdown files (or folders) to the `blog` directory.\\n\\nRegular blog authors can be added to `authors.yml`.\\n\\nThe blog post date can be extracted from filenames, such as:\\n\\n- `2019-05-30-welcome.md`\\n- `2019-05-30-welcome/index.md`\\n\\nA blog post folder can be convenient to co-locate blog post images:\\n\\n![Docusaurus Plushie](./docusaurus-plushie-banner.jpeg)\\n\\nThe blog supports tags as well!\\n\\n**And if you don\'t want a blog**: just delete this directory, and use `blog: false` in your Docusaurus config."},{"id":"mdx-blog-post","metadata":{"permalink":"/blog/mdx-blog-post","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2021-08-01-mdx-blog-post.mdx","source":"@site/blog/2021-08-01-mdx-blog-post.mdx","title":"MDX Blog Post","description":"Blog posts support Docusaurus Markdown features, such as MDX.","date":"2021-08-01T00:00:00.000Z","formattedDate":"August 1, 2021","tags":[{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":0.175,"hasTruncateMarker":false,"authors":[{"name":"S\xe9bastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","imageURL":"https://github.com/slorber.png","key":"slorber"}],"frontMatter":{"slug":"mdx-blog-post","title":"MDX Blog Post","authors":["slorber"],"tags":["docusaurus"]},"unlisted":false,"prevItem":{"title":"Welcome","permalink":"/blog/welcome"},"nextItem":{"title":"Long Blog Post","permalink":"/blog/long-blog-post"}},"content":"Blog posts support [Docusaurus Markdown features](https://docusaurus.io/docs/markdown-features), such as [MDX](https://mdxjs.com/).\\n\\n:::tip\\n\\nUse the power of React to create interactive blog posts.\\n\\n```js\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>\\n```\\n\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>\\n\\n:::"},{"id":"long-blog-post","metadata":{"permalink":"/blog/long-blog-post","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2019-05-29-long-blog-post.md","source":"@site/blog/2019-05-29-long-blog-post.md","title":"Long Blog Post","description":"This is the summary of a very long blog post,","date":"2019-05-29T00:00:00.000Z","formattedDate":"May 29, 2019","tags":[{"label":"hello","permalink":"/blog/tags/hello"},{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":2.05,"hasTruncateMarker":true,"authors":[{"name":"Endilie Yacop Sucipto","title":"Maintainer of Docusaurus","url":"https://github.com/endiliey","imageURL":"https://github.com/endiliey.png","key":"endi"}],"frontMatter":{"slug":"long-blog-post","title":"Long Blog Post","authors":"endi","tags":["hello","docusaurus"]},"unlisted":false,"prevItem":{"title":"MDX Blog Post","permalink":"/blog/mdx-blog-post"},"nextItem":{"title":"First Blog Post","permalink":"/blog/first-blog-post"}},"content":"This is the summary of a very long blog post,\\n\\nUse a `\x3c!--` `truncate` `--\x3e` comment to limit blog post size in the list view.\\n\\n\x3c!--truncate--\x3e\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"},{"id":"first-blog-post","metadata":{"permalink":"/blog/first-blog-post","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2019-05-28-first-blog-post.md","source":"@site/blog/2019-05-28-first-blog-post.md","title":"First Blog Post","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","date":"2019-05-28T00:00:00.000Z","formattedDate":"May 28, 2019","tags":[{"label":"hola","permalink":"/blog/tags/hola"},{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":0.12,"hasTruncateMarker":false,"authors":[{"name":"Gao Wei","title":"Docusaurus Core Team","url":"https://github.com/wgao19","image_url":"https://github.com/wgao19.png","imageURL":"https://github.com/wgao19.png"}],"frontMatter":{"slug":"first-blog-post","title":"First Blog Post","authors":{"name":"Gao Wei","title":"Docusaurus Core Team","url":"https://github.com/wgao19","image_url":"https://github.com/wgao19.png","imageURL":"https://github.com/wgao19.png"},"tags":["hola","docusaurus"]},"unlisted":false,"prevItem":{"title":"Long Blog Post","permalink":"/blog/long-blog-post"}},"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"}]}')}}]);